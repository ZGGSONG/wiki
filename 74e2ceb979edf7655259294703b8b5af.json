{"posts": [{"title": "Unix\u7f51\u7edc\u7f16\u7a0b\u590d\u4e60", "date": "2020-09-08T07:53:00-00.00", "path": "/archives/unix_network/", "text": "LNP\u4f5c\u4e1a1\n\n2020\u5e742\u670817\u53f7 \u661f\u671f\u4e00 08:55\n\n\nGNU\u662f\u4ec0\u4e48\u8bcd\u7ec4\u7684\u7f29\u5199\uff1f\n\n\n\u7b54\uff1a\nGNU's Not Unix\n^-----^---^---\n\u7bad\u5934\u6307\u5411\u7684\u90a3\u4e2a\u90a3\u4e2a\u5b57\u6bcd\uff1aG N U\n\n\n\nLNP\u4f5c\u4e1a2\n\n2020\u5e742\u670820\u53f7 \u661f\u671f\u56db 11:01\n\n\nLinux\u4e2d\u76ee\u5f55/proc\u5b58\u50a8\u7684\u662f\u4ec0\u4e48\u4fe1\u606f\uff1f\n\n\n\u7b54\uff1a\nLinux \u5185\u6838\u63d0\u4f9b\u4e86\u4e00\u79cd\u901a\u8fc7 /proc \u6587\u4ef6\u7cfb\u7edf\uff0c\u5728\u8fd0\u884c\u65f6\u8bbf\u95ee\u5185\u6838\u5185\u90e8\u6570\u636e\u7ed3\u6784\u3001\u6539\u53d8\u5185\u6838\u8bbe\u7f6e\u7684\u673a\u5236\u3002proc\u6587\u4ef6\u7cfb\u7edf\u662f\u4e00\u4e2a\u4f2a\u6587\u4ef6\u7cfb\u7edf\uff0c\u5b83\u53ea\u5b58\u5728\u5185\u5b58\u5f53\u4e2d\uff0c\u800c\u4e0d\u5360\u7528\u5916\u5b58\u7a7a\u95f4\u3002\u5b83\u4ee5\u6587\u4ef6\u7cfb\u7edf\u7684\u65b9\u5f0f\u4e3a\u8bbf\u95ee\u7cfb\u7edf\u5185\u6838\u6570\u636e\u7684\u64cd\u4f5c\u63d0\u4f9b\u63a5\u53e3\u3002\n\n\u7528\u6237\u548c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7proc\u5f97\u5230\u7cfb\u7edf\u7684\u4fe1\u606f\uff0c\u5e76\u53ef\u4ee5\u6539\u53d8\u5185\u6838\u7684\u67d0\u4e9b\u53c2\u6570\u3002\u7531\u4e8e\u7cfb\u7edf\u7684\u4fe1\u606f\uff0c\u5982\u8fdb\u7a0b\uff0c\u662f\u52a8\u6001\u6539\u53d8\u7684\uff0c\u6240\u4ee5\u7528\u6237\u6216\u5e94\u7528\u7a0b\u5e8f\u8bfb\u53d6proc\u6587\u4ef6\u65f6\uff0cproc\u6587\u4ef6\u7cfb\u7edf\u662f\u52a8\u6001\u4ece\u7cfb\u7edf\u5185\u6838\u8bfb\u51fa\u6240\u9700\u4fe1\u606f\u5e76\u63d0\u4ea4\u7684\u3002\u4e0b\u9762\u5217\u51fa\u7684\u8fd9\u4e9b\u6587\u4ef6\u6216\u5b50\u6587\u4ef6\u5939\uff0c\u5e76\u4e0d\u662f\u90fd\u662f\u5728\u4f60\u7684\u7cfb\u7edf\u4e2d\u5b58\u5728\uff0c\u8fd9\u53d6\u51b3\u4e8e\u4f60\u7684\u5185\u6838\u914d\u7f6e\u548c\u88c5\u8f7d\u7684\u6a21\u5757\u3002\u53e6\u5916\uff0c\u5728/proc\u4e0b\u8fd8\u6709\u4e09\u4e2a\u5f88\u91cd\u8981\u7684\u76ee\u5f55\uff1anet\uff0cscsi\u548csys\u3002 Sys\u76ee\u5f55\u662f\u53ef\u5199\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b83\u6765\u8bbf\u95ee\u6216\u4fee\u6539\u5185\u6838\u7684\u53c2\u6570\uff0c\u800cnet\u548cscsi\u5219\u4f9d\u8d56\u4e8e\u5185\u6838\u914d\u7f6e\u3002\u4f8b\u5982\uff0c\u5982\u679c\u7cfb\u7edf\u4e0d\u652f\u6301scsi\uff0c\u5219scsi \u76ee\u5f55\u4e0d\u5b58\u5728\u3002\n\u9664\u4e86\u4ee5\u4e0a\u4ecb\u7ecd\u7684\u8fd9\u4e9b\uff0c\u8fd8\u6709\u7684\u662f\u4e00\u4e9b\u4ee5\u6570\u5b57\u547d\u540d\u7684\u76ee\u5f55\uff0c\u5b83\u4eec\u662f\u8fdb\u7a0b\u76ee\u5f55\u3002\u7cfb\u7edf\u4e2d\u5f53\u524d\u8fd0\u884c\u7684\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u90fd\u6709\u5bf9\u5e94\u7684\u4e00\u4e2a\u76ee\u5f55\u5728/proc\u4e0b\uff0c\u4ee5\u8fdb\u7a0b\u7684 PID\u53f7\u4e3a\u76ee\u5f55\u540d\uff0c\u5b83\u4eec\u662f\u8bfb\u53d6\u8fdb\u7a0b\u4fe1\u606f\u7684\u63a5\u53e3\u3002\u800cself\u76ee\u5f55\u5219\u662f\u8bfb\u53d6\u8fdb\u7a0b\u672c\u8eab\u7684\u4fe1\u606f\u63a5\u53e3\uff0c\u662f\u4e00\u4e2alink\u3002\n\nLNP\u4f5c\u4e1a3\n\n2020\u5e743\u67082\u53f7 \u661f\u671f\u4e00 08:56\n\n\n\u5199\u4e00\u4e2aC\u7a0b\u5e8f: \u751f\u621010\u4e2a\u5b50\u8fdb\u7a0b\u5e76\u5229\u7528waitpid\u56de\u6536\uff0c\u7236\u8fdb\u7a0b\u56de\u6536\u5b50\u8fdb\u7a0b\u65f6\u8f93\u51fa\u5b50\u8fdb\u7a0b\u7684PID.\n\n\u4ee3\u7801\n#include&lt;unistd.h&gt;\n#include&lt;sys/types.h&gt;\n#include&lt;sys/wait.h&gt;\n#include&lt;stdlib.h&gt;\n#include&lt;stdio.h&gt;\nconst int WNOHNAG = 1;\nconst int threadCount = 10;\nint main(int argc,char *argv[]) {\n  // \u751f\u621010\u4e2a\u5b50\u8fdb\u7a0b\u5e76\u5229\u7528waitpid\u56de\u6536\uff0c\u7236\u8fdb\u7a0b\u56de\u6536\u5b50\u8fdb\u7a0b\u65f6\u8f93\u51fa\u5b50\u8fdb\u7a0b\u7684PID.\n  pid_t *pid = (pid_t*)malloc(sizeof(int)*threadCount);\n  int i = 0;\n  do{\n    *(pid + i) = fork();\n    if (*(pid + i) == 0) {//\u5b50\u8fdb\u7a0b\n      printf(&quot;child[%d] created...(sleep 1s)\\n&quot;,i);\n      sleep(5-0.5*i);//\u6d4b\u8bd5waitpid\u662f\u5426\u751f\u6548\n      break;\n    }else if (*(pid + i)&gt;0) {//\u7236\u8fdb\u7a0b\n      //\n    } else {\n      printf(&quot;Error\\n&quot;);\n      break;\n    }\n    i ++ ;\n  } while (i&lt;threadCount);\n  //\u7236\u8fdb\u7a0b\n  if (i == threadCount) {\n    int threadCountTemp = threadCount;\n    printf(&quot;Parent waiting child...\\n&quot;);\n    while (threadCountTemp&gt;0) {\n      for(int j = 0;j&lt;threadCount;j ++ ) {\n        if (waitpid(*(pid + j),NULL,WNOHNAG)&gt;0) {\n          printf(&quot;&gt;&gt;child[%d] done,pid = %d\\n&quot;,j,*(pid + j));\n          threadCountTemp--;\n        }\n        sleep(0.001);\n      }\n    }\n  }\n  return 0;\n}\n\n\u7f16\u8bd1\u811a\u672c\n#!/bin/sh\necho &quot;\\n--------- project $1 start ---------\\n&quot;\ng++ -o $1 $1.c `mysql_config --cflags --libs`;./$1;echo &quot;\\n--------- project $1 end ---------\\n&quot;\nrm $1;\n\n\u8fd0\u884c\u7ed3\u679c\n\n\nLNP\u4f5c\u4e1a4\n\n\u7edf\u8ba1\u5df2\u7ecf\u5b89\u88c5\u597d\u865a\u62df\u673a\u7684\u4eba\u6570,\u5b89\u88c5\u597d\u7684\u63d0\u4ea4\u4f5c\u4e1a,\u6ca1\u88c5\u597d\u4e0d\u8981\u63d0\u4ea4,\u672c\u5468\u672b\u4e4b\u524d\u63d0\u4ea4\n\n\n\u7b54\uff1a\n\u5df2\u5b89\u88c5\n\n\n\nLNP\u4f5c\u4e1a5\n\n\u5199\u4e00\u5bf9\u57fa\u4e8eUDP\u7684\u670d\u52a1\u5668\u5ba2\u6237\u7aef\u7a0b\u5e8f\u3002\n\n\u5ba2\u6237\u7aef\u53ef\u4ee5\u7528\u547d\u4ee4./udpclient &lt;IP&gt; &lt;number&gt;\u6267\u884c\n\u5e76\u5728\u6807\u51c6\u8f93\u51fa\u4e0a\u8f93\u51fanumber + 1\n\u670d\u52a1\u5668\u5728\u7ea6\u5b9a\u7684\u672c\u5730\u5957\u63a5\u5b57\u4e0a\u7b49\u5f85\u5ba2\u6237\u7aef\u6d88\u606f\uff0c\u52a01\u64cd\u4f5c\u540e\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\n\u5148\u6765\u5148\u670d\u52a1\n\u76f4\u63a5\u5728\u4f5c\u4e1a\u4e2d\u7c98\u8d34\u4e24\u7aef\u4ee3\u7801\uff0cinclude\u90e8\u5206\u53ea\u7c98\u8d34\u4e00\u6b21\n\u4ee3\u7801\n\u670d\u52a1\u7aef\n#include &lt;stdio.h&gt;\n  #include &lt;unistd.h&gt;\n  #include &lt;sys/types.h&gt;\n  #include &lt;sys/socket.h&gt;\n  #include &lt;string.h&gt;\n  #include &lt;arpa/inet.h&gt;\n  #include &lt;stdlib.h&gt;\n\n  typedef struct sockaddr* saddrp;\n\n  const char* BIND_SERVER_IP = &quot;127.0.0.1&quot;;\n  const int BIND_PORT = 30303;\n\n  int main(int argc, char *argv[])\n  {\n    // \u521b\u5efafd\n    int sockfd = socket(AF_INET,SOCK_DGRAM,0);\n    if (sockfd &lt; 0){\n        perror(&quot;\u521b\u5efa\u6587\u4ef6\u63cf\u8ff0\u7b26\u5931\u8d25&quot;);\n        return -1;\n    }\n    // \u914d\u7f6e\n    struct sockaddr_in addr = {};\n    addr.sin_family = AF_INET; // IPV4\n    addr.sin_addr.s_addr = inet_addr(BIND_SERVER_IP);// IP\n    addr.sin_port = htons(BIND_PORT); // PORT\n    // \u7ed1\u5b9a\n    int res = bind(sockfd,(saddrp)&amp;addr,sizeof(addr));\n    if (res &lt; 0){\n        perror(&quot;\u76d1\u542c\u5931\u8d25&quot;);\n        return -1;\n    }\n    struct sockaddr_in src_addr ={};\n    socklen_t addr_len = sizeof(struct sockaddr_in);\n    while(1){\n      char buf[255] = {};\n      //\u63a5\u6536\u6570\u636e\u548c\u6765\u6e90\u7684ip\u5730\u5740\n      recvfrom(sockfd,buf,sizeof(buf),0,(saddrp)&amp;src_addr,&amp;addr_len);\n      printf(&quot;Recv:%s\\n&quot;, buf);\n      // char*\u8f6cint\n      int recv = atoi(buf);\n      // +1\u64cd\u4f5c\n      recv++;\n      // int\u8f6cchar*\n      sprintf(buf, &quot;%d&quot;, recv);\n      // \u53d1\u9001\u6570\u636e\u7ed9\u76ee\u6807\u5730\u5740\n      sendto(sockfd,buf,strlen(buf)+1,0,(saddrp)&amp;src_addr,addr_len);\n    }  \n    //\u5173\u95edsocket\u5bf9\u8c61\n    close(sockfd);\n    return 0;\n  }\n\n\u670d\u52a1\u7aef\u7f16\u8bd1\u811a\u672c\n#!/bin/sh\n  echo &quot;\\n--------- project $1 start ---------\\n&quot;\n  g++ -o $1 $1.c `mysql_config --cflags --libs`;./$1;echo &quot;\\n--------- project $1 end ---------\\n&quot;\n  rm $1;\n\n\u5ba2\u6237\u7aef\n#include &lt;stdio.h&gt;\n  #include &lt;sys/types.h&gt;\n  #include &lt;sys/socket.h&gt;\n  #include &lt;string.h&gt;\n  #include &lt;arpa/inet.h&gt;\n  #include &lt;unistd.h&gt;\n  typedef struct sockaddr* saddrp;\n\n  int main(int argc, char *argv[])\n  {\n    if(argc &lt; 3) {\n      perror(&quot;\u53c2\u6570\u4e0d\u8db3&quot;);\n      return -1;\n    }\n    char* ip = argv[1];\n    char* buf = argv[2];\n    int sockfd = socket(AF_INET,SOCK_DGRAM,0);\n    if (sockfd &lt; 0){\n        perror(&quot;\u521b\u5efa\u6587\u4ef6\u63cf\u8ff0\u7b26\u5931\u8d25&quot;);\n        return -1;\n    }\n    struct sockaddr_in addr = {};\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(30303);\n    addr.sin_addr.s_addr = inet_addr(ip);\n\n    socklen_t addr_len = sizeof(struct sockaddr_in);\n    while(1)\n    {\n        char recv_buf[255] = {};\n        sendto(sockfd,buf,strlen(buf)+1,0,(saddrp)&amp;addr,sizeof(addr));\n        recvfrom(sockfd,recv_buf,sizeof(recv_buf),0,(saddrp)&amp;addr,&amp;addr_len);\n        printf(&quot;Recv:%s\\n&quot;,recv_buf);\n        // \u4e00\u6b21\u5c31\u7ed3\u675f\n        break;\n    }\n    close(sockfd);\n    return 0;\n  }\n\n\u5ba2\u6237\u7aef\u7f16\u8bd1\u811a\u672c\n#!/bin/sh\n  echo &quot;\\n--------- project $1 start ---------\\n&quot;\n  g++ -o $1 $1.c `mysql_config --cflags --libs`;./$1 $2 $3;echo &quot;\\n--------- project $1 end ---------\\n&quot;\n  rm $1;\n\n\u8fd0\u884c\u7ed3\u679c\n\n\n3.10 \u5e76\u53d1\u670d\u52a1\u5668\u5b9e\u9a8c\n\n2020\u5e743\u670810\u53f7 \u661f\u671f\u4e8c 15:16\n\n\n\u57283\u67088\u65e5\u8bfe\u7a0b\u5185\u5bb9\u7684\u57fa\u7840\u4e0a\u4fee\u6539\u5e76\u53d1\u670d\u52a1\u5668\u548c\u5bf9\u5e94\u5ba2\u6237\u7aef\u7684\u4ee3\u7801\uff0c\u4f7f\u5f97\u670d\u52a1\u7aef\u53ef\u4ee5\u8fd4\u56de\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u4e24\u4e2a\u6574\u6570\u4e4b\u548c\u3002\u670d\u52a1\u5668\u63d0\u4f9b\u5e76\u53d1\u670d\u52a1\u3002\u8fd9\u6b21\u4f5c\u4e1a\u7684\u4ee3\u7801\u4e5f\u662f\u5b9e\u9a8c\u4e8c\u7684\u4ee3\u7801\u3002\n\n\u670d\u52a1\u7aef\u4ee3\u7801\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;string.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct sockaddr* saddrp;\n\nconst char* BIND_SERVER_IP = &quot;127.0.0.1&quot;;\nconst int BIND_PORT = 30303;\n\nint main(int argc, char *argv[])\n{\n  // \u521b\u5efafd\n  int sockfd = socket(AF_INET,SOCK_DGRAM,0);\n  if (sockfd &lt; 0){\n      perror(&quot;\u521b\u5efa\u6587\u4ef6\u63cf\u8ff0\u7b26\u5931\u8d25&quot;);\n      return -1;\n  }\n  // \u914d\u7f6e\n  struct sockaddr_in addr = {};\n  addr.sin_family = AF_INET; // IPV4\n  addr.sin_addr.s_addr = inet_addr(BIND_SERVER_IP);// IP\n  addr.sin_port = htons(BIND_PORT); // PORT\n  // \u7ed1\u5b9a\n  int res = bind(sockfd,(saddrp)&amp;addr,sizeof(addr));\n  if (res &lt; 0){\n      perror(&quot;\u76d1\u542c\u5931\u8d25&quot;);\n      return -1;\n  }\n  struct sockaddr_in src_addr ={};\n  socklen_t addr_len = sizeof(struct sockaddr_in);\n  int counter = 0;\n  int a[2] = {0,0};\n  while(1){\n    counter++;\n    char buf[255] = {};\n    //\u63a5\u6536\u6570\u636e\u548c\u6765\u6e90\u7684ip\u5730\u5740\n    recvfrom(sockfd,buf,sizeof(buf),0,(saddrp)&amp;src_addr,&amp;addr_len);\n    printf(&quot;Recv:%s\\n&quot;, buf);\n    // char*\u8f6cint\n    int recv = atoi(buf);\n    a[counter-1] = recv;\n    if (counter == 2) {\n      int ret_res = a[0] + a[1];\n      printf(&quot;Return:%d + %d = %d\\n&quot;, a[0], a[1], ret_res);\n      counter = 0;\n      // int\u8f6cchar*\n      sprintf(buf, &quot;%d&quot;, ret_res);\n      // \u53d1\u9001\u6570\u636e\u7ed9\u76ee\u6807\u5730\u5740\n      sendto(sockfd,buf,strlen(buf)+1,0,(saddrp)&amp;src_addr,addr_len);\n    }\n  }\n  //\u5173\u95edsocket\u5bf9\u8c61\n  close(sockfd);\n  return 0;\n}\n\n\u5ba2\u6237\u7aef\u4ee3\u7801\n#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;string.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;unistd.h&gt;\ntypedef struct sockaddr* saddrp;\n\nconst char* BIND_SERVER_IP = &quot;127.0.0.1&quot;;\nconst int BIND_PORT = 30303;\n\nint main(int argc, char *argv[])\n{\n  char buf[] = &quot;1&quot;;\n\n  int sockfd = socket(AF_INET,SOCK_DGRAM,0);\n  if (sockfd &lt; 0){\n      perror(&quot;\u521b\u5efa\u6587\u4ef6\u63cf\u8ff0\u7b26\u5931\u8d25&quot;);\n      return -1;\n  }\n  struct sockaddr_in addr = {};\n  addr.sin_family = AF_INET;\n  addr.sin_port = htons(BIND_PORT);\n  addr.sin_addr.s_addr = inet_addr(BIND_SERVER_IP);\n\n  socklen_t addr_len = sizeof(struct sockaddr_in);\n  while(1)\n  {\n      char recv_buf[255] = {};\n      sendto(sockfd,buf,strlen(buf)+1,0,(saddrp)&amp;addr,sizeof(addr));\n      sendto(sockfd,buf,strlen(buf)+1,0,(saddrp)&amp;addr,sizeof(addr));\n      recvfrom(sockfd,recv_buf,sizeof(recv_buf),0,(saddrp)&amp;addr,&amp;addr_len);\n      printf(&quot;Recv:%s\\n&quot;,recv_buf);\n      // \u4e00\u6b21\u5c31\u7ed3\u675f\n      break;\n  }\n  close(sockfd);\n  return 0;\n}\n\n\u8fd0\u884c\u7ed3\u679c\n\n\n3.10 \u5b9e\u73b0popen\n\n2020\u5e743\u670810\u53f7 \u661f\u671f\u4e8c 15:21\n\n\n\u5b9e\u9a8c\u4e00. \u5b9e\u73b0\u7a0b\u5e8fmypopen\n\n\u4ee5\u6b64shell\u547d\u4ee4\u4e3a\u4f8b\n#./mypopen ls -l\n\u7236\u8fdb\u7a0b\u9996\u5148\u521b\u5efapipe\u7ba1\u9053\uff1b\n\u7236\u8fdb\u7a0b\u521b\u5efa\u5b50\u8fdb\u7a0b\uff1b\n\u5b50\u8fdb\u7a0b\u6267\u884cls -l\uff1b\n\u5b50\u8fdb\u7a0b\u7684\u8f93\u51fa\u7ecf\u7ba1\u9053\u4f20\u7ed9\u7236\u8fdb\u7a0b\uff1b\n\u7236\u8fdb\u7a0b\uff0c\u5c06\u5b50\u8fdb\u7a0b\u7684\u4fe1\u606f\u8f93\u51fa\u5728\u6807\u51c6\u8f93\u51fa\u4e0a\n\u4ee3\u7801\n#include &lt;unistd.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/wait.h&gt;  \n#include &lt;limits.h&gt;\n#include &lt;errno.h&gt;  \n#include &lt;malloc.h&gt;\n\n/* \u6a21\u62dfpopen */\nFILE *mypopen(char* cmd[], char type);\n\n/* \u8c03\u8bd5 */\nint main(int argc, char* argv[]){\n  if (argc &lt; 2) {\n    printf(&quot;%s&quot;, &quot;\u8bf7\u8f93\u5165\u6307\u4ee4&quot;);\n    exit(1);\n  }\n  // \u6700\u591a\u652f\u630110\u4e2a\u53c2\u6570\n  // \u6784\u9020\u65b0\u6570\u7ec4\uff0c\u63d0\u53d6\u7b2c\u4e8c\u4e2a\u53ca\u540e\u9762\u7684\u53c2\u6570\u8d4b\u7ed9\u65b0\u6570\u7ec4(cmd)\uff0c\u5e76\u5728\u4ee4\u65b0\u6570\u7ec4\u6700\u540e\u4e00\u4e2a\u6570\u7ec4\u503c\u4e3aNULL\n  printf(&quot;You Exe Cmd: &quot;);\n  char** cmd = (char**)malloc(sizeof(char*)*10);\n  for (int i = 1; i &lt; argc; i++) {\n    cmd[i - 1] = argv[i];\n    printf(&quot;%s &quot;, argv[i]);\n  }\n  printf(&quot;\\n&quot;);\n  cmd[argc] = NULL;\n  // \u975e\u963b\u585e\u6267\u884c\u6307\u4ee4\n  FILE* fp = mypopen(cmd, &#39;r&#39;);\n  // \u8f93\u51fa\u7ed3\u679c\n  if (fp == NULL){\n    printf(&quot;%s&quot;, &quot;\u65e0\u6548\u7684\u6307\u4ee4&quot;);\n    exit(1);\n  }\n  char c;\n  c = fgetc(fp);\n  while (c != EOF) {\n    putchar(c);\n    c = fgetc(fp);\n  }\n  return 0;\n}\n\n/* \u6a21\u62dfpopen */\nFILE *mypopen(char* cmd[], char type) {  \n  int fd[2]; // 0\u8bfb 1\u5199\n  int pid_t; // \u8fdb\u7a0b\u63cf\u8ff0\u7b26                 \n\n  // \u5176\u4ed6\u53c2\u6570\u4e3a\u975e\u6cd5\n  if(type !=&#39;r&#39; &amp;&amp; type != &#39;w&#39;){  \n    printf(&quot;myopen() illegal param type, must be &#39;r&#39; or &#39;w&#39;/n&quot;);  \n    return NULL;  \n  }  \n\n  // \u5efa\u7acb\u7ba1\u9053  \n  if(pipe(fd) &lt; 0) {\n    printf(&quot;myopen() pipe create error/n&quot;);  \n    return NULL;  \n  }\n\n  // \u5efa\u7acb\u5b50\u8fdb\u7a0b  \n  pid_t = fork();             \n\n  if(pid_t &lt; 0) {\n    return NULL;  \n  }else if(pid_t == 0) {\n    // \u5b50\u8fdb\u7a0b\u6267\u884c\u547d\u4ee4\n    if(type == &#39;r&#39;){  \n      close(fd[0]); // \u5173\u95ed\u8bfb\u7ba1\u9053\n      // dup2(fd[1],STDOUT_FILENO);\n      dup(fd[1]);  // \u5c06\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u7ba1\u9053\u5199\u7aef\n      close(fd[1]); // \u4f7f\u7528\u5b8c\u6bd5\uff0c\u5173\u95ed\u7ba1\u9053\n    }else{  \n      close(fd[1]); // \u5173\u95ed\u5199\u7ba1\u9053\uff0c\u7236\u8fdb\u7a0b\u6765\u4ee5\u5b50\u5199\n      // dup2(fd[0],STDIN_FILENO);\n      dup(fd[0]); // \u5c06\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u7ba1\u9053\u8bfb\u7aef\n      close(fd[0]); // \u4f7f\u7528\u5b8c\u6bd5\uff0c\u5173\u95ed\u7ba1\u9053\n    }\n    if(execvp(cmd[0], cmd) &lt; 0)          //\u7528exec\u65cf\u51fd\u6570\u6267\u884c\u547d\u4ee4  \n      return NULL;      \n  } else {\n    wait(0); // \u7236\u8fdb\u7a0b\u7b49\u5f85\u5b50\u8fdb\u7a0b\u8fd4\u56de  \n    if(type==&#39;r&#39;){\n      close(fd[1]);  \n      return fdopen(fd[0],&quot;r&quot;); // \u7a0b\u5e8f\u9700\u8981\u8fd4\u56de\u7684\u53c2\u6570\u662f\u6587\u4ef6\u6307\u9488\uff0c\u56e0\u6b64\u9700\u8981\u7528 fdopen \u51fd\u6570\u5c06\u63cf\u8ff0\u7b26\u6253\u5f00\uff0c\u5176\u8fd4\u56de\u503c\u4e3a\u76f8\u5e94\u7684\u6587\u4ef6\u6307\u9488   \n    }else{  \n      close(fd[0]);  \n      return fdopen(fd[1],&quot;w&quot;);  \n    }\n  }\n}\n\n\u7f16\u8bd1\u811a\u672c\n\n#!/bin/sh\necho &quot;\\n--------- project $1 start ---------\\n&quot;\ng++ -o $1 $1.c `mysql_config --cflags --libs`;./$@;echo &quot;\\n--------- project $1 end ---------\\n&quot;\nrm $1;\n\n\u8fd0\u884c\u7ed3\u679c\n\nmypopen\u6e90\u7a0b\u5e8f\u7684\u8bbe\u8ba1\u4e2d\uff0c\u89c4\u5b9a\u4e86\u53c2\u6570\u4e0d\u5f97\u8d85\u8fc710\u4e2a\n\n\u6307\u4ee4\uff08\u5305\u542b\u6307\u4ee4\u540d\u79f0\uff09\u53c2\u6570\u4e3a1\u65f6\n\n\u6307\u4ee4\uff08\u5305\u542b\u6307\u4ee4\u540d\u79f0\uff09\u53c2\u6570\u4e3a2\u65f6\n\n\u6307\u4ee4\uff08\u5305\u542b\u6307\u4ee4\u540d\u79f0\uff09\u53c2\u6570\u4e3an(n&lt;=10)\u65f6\n\ndup\u4e0edup2\n\nAPUE\u548cman\u6587\u6863\u90fd\u7528\u4e00\u53e5\u8bdd\u7b80\u660e\u7684\u8bf4\u51fa\u4e86\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\uff1a\u590d\u5236\u4e00\u4e2a\u73b0\u5b58\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\n\n#include &lt;unistd.h&gt;\nint dup(int oldfd);\nint dup2(int oldfd, int newfd);\n\n\n\u5f53\u8c03\u7528dup\u51fd\u6570\u65f6\uff0c\u5185\u6838\u5728\u8fdb\u7a0b\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u6b64\u63cf\u8ff0\u7b26\u662f\u5f53\u524d\u53ef\u7528\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u6700\u5c0f\u6570\u503c\uff0c\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u6307\u5411oldfd\u6240\u62e5\u6709\u7684\u6587\u4ef6\u8868\u9879\u3002\ndup2\u548cdup\u7684\u533a\u522b\u5c31\u662f\u53ef\u4ee5\u7528newfd\u53c2\u6570\u6307\u5b9a\u65b0\u63cf\u8ff0\u7b26\u7684\u6570\u503c\uff0c\u5982\u679cnewfd\u5df2\u7ecf\u6253\u5f00\uff0c\u5219\u5148\u5c06\u5176\u5173\u95ed\u3002\u5982\u679cnewfd\u7b49\u4e8eoldfd\uff0c\u5219dup2\u8fd4\u56denewfd, \u800c\u4e0d\u5173\u95ed\u5b83\u3002dup2\u51fd\u6570\u8fd4\u56de\u7684\u65b0\u6587\u4ef6\u63cf\u8ff0\u7b26\u540c\u6837\u4e0e\u53c2\u6570oldfd\u5171\u4eab\u540c\u4e00\u6587\u4ef6\u8868\u9879\u3002\nAPUE\u7528\u53e6\u5916\u4e00\u4e2a\u79cd\u65b9\u6cd5\u8bf4\u660e\u4e86\u8fd9\u4e2a\u95ee\u9898\uff1a\n\u5b9e\u9645\u4e0a\uff0c\u8c03\u7528dup(oldfd)\u7b49\u6548\u4e8e\uff0cfcntl(oldfd, F_DUPFD, 0);\n\u800c\u8c03\u7528dup2(oldfd, newfd)\u7b49\u6548\u4e8e\uff0cclose(oldfd);fcntl(oldfd, F_DUPFD, newfd);\n\n\n\n\u53c2\u8003\u8d44\u6599\n\nlinux\u4e4bdup\u548cdup2\u51fd\u6570\u89e3\u6790\nwarning\uff1adeprecated conversion from string constant to 'char *'\u89e3\u51b3\u65b9\u6848\nexecvp()\u51fd\u6570\nlinux bash Shell\u7279\u6b8a\u53d8\u91cf\uff1aShell $0, $#, $*, $@, $?, $$\u548c\u547d\u4ee4\u884c\u53c2\u6570\n\n3.19 select\n\n2020\u5e743\u670819\u53f7 \u661f\u671f\u56db 11:04\n\n\n\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u57fa\u4e8eselect\u51fd\u6570\u7684\u7a0b\u5e8f\uff1amycp\uff0c\u5176\u4f7f\u7528\u65b9\u5f0f\u4e3a\uff1a\n\n./mycp filename1 filename2\n\u8fd0\u884c\u7ed3\u679c\u662ffilename2\u662f\u88ab\u590d\u5236\u7684filename1\uff0c\u4e24\u8005\u5185\u5bb9\u76f8\u540c\u3002\n\u6587\u4ef6\u64cd\u4f5c\u76f8\u5173\u8c03\u7528open, read, write,close\u53ef\u67e5\u9605Linux\u8bfe\u7a0b\u6559\u6750\n\u6ce8\u610f\u56e0\u4e3a\u8981\u4f7f\u7528select\uff0c\u6240\u4ee5\u4e0d\u8981\u7528\u6587\u4ef6\u6d41\u6307\u9488\u5904\u7406\u6587\u4ef6\u3002\n\u4ee3\u7801\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/select.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n\nint main(int argc, char* argv[]) {\n\n  if (argc &lt; 3) {\n    printf(&quot;mycp require two params\\n&quot;);\n    return 0;\n  }\n\n  // const char * pathname = &quot;./test&quot;;\n  // const char * pathname_cp = &quot;./testcp&quot;;\n  const char * pathname = argv[1];\n  const char * pathname_cp = argv[2];\n\n  if (access(pathname, R_OK) &lt; 0){\n    printf(&quot;no access to read / no such file\\n&quot;);\n    return 0;\n  }\n\n  int fd, fd_cp;\n  char buf[1]; // \u4e00\u4e2a\u4e00\u4e2a\u7684\u8bfb\uff0c\u53ea\u8981\u8bfb\u5230\\0\u90a3\u4e48\u5c31\u8bf4\u660e\u7ed3\u675f\u4e86\n  int ret, ret_cp, sret;\n\n  fd = open(pathname, O_RDONLY);\n  fd_cp = open(pathname_cp, O_WRONLY|O_CREAT);\n\n  fd_set readfds;\n\n  FD_ZERO(&amp;readfds);\n  FD_SET(fd, &amp;readfds); // \u52a0\u5165\u5230\u8f6e\u8be2\u5217\u8868\n\n  while(1) {\n\n    // \u963b\u585e\n    sret = select(fd+1, &amp;readfds, NULL, NULL, 0); // &amp;timeout\n\n    if (sret == 0 || sret == -1) {\n      printf(&quot;sret = %d\\n&quot;, sret);\n      printf(&quot;    error\\n&quot;);\n      break;\n    } else {\n      // printf(&quot;sret = %d\\n&quot;, sret);\n      memset((void *) buf, 0, 1);\n      ret = read(fd, (void *) buf, 1);\n      if (ret != -1) {\n        if (buf[0] == &#39;\\0&#39;) { // \u505c\u6b62\u8f6e\u8be2\u6761\u4ef6\n          break;\n        } else {\n          ret_cp = write(fd_cp, (void *) buf, 1);\n          // printf(&quot;ret_cp = %d\\n&quot;, ret_cp);\n        }\n        if (ret_cp == -1) {\n          break;\n        }\n      } else {\n        printf(&quot;ret = %d\\n&quot;, ret);\n        printf(&quot;    error\\n&quot;);\n        break;\n      }\n    }\n  }\n  return 0;\n}\n\n\u8c03\u8bd5\n\n\u8f93\u5165\u53c2\u6570\u9519\u8bef\u65f6\n\n\n\n\u8f93\u5165\u7684\u6587\u4ef6\u4e0d\u5b58\u5728/\u5f53\u524d\u7528\u6237\u65e0\u8bfb\u6743\u9650\n\n\n\n\u6d4b\u8bd5\u590d\u5236test\u6587\u4ef6\n\n\n\u53c2\u8003\u8d44\u6599\n\nLinux C \u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u662f\u5426\u53ef\u8bfb\uff0c\u53ef\u5199\uff0c\u53ef\u6267\u884c\nLinux C\u2014\u2014select\u51fd\u6570\u8be6\u89e3\u53ca\u5176\u5e94\u7528\nLinux\u4e0bC\u8bed\u8a00open\u51fd\u6570\u6253\u5f00\u6216\u521b\u5efa\u6587\u4ef6\u4e0eread\uff0cwrite\u51fd\u6570\u8be6\u7ec6\u8bb2\u89e3\nC Programming in Linux Tutorial #083 - select() function\nLinux\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5fc5\u987b\u624b\u52a8close\u5417\n\n\n  \u6d4b\u8bd5\n\n\n\u4e0b\u8f7d\u622a\u56fe -->\n\u4e0b\u8f7d\u622a\u56fe\n\n  Test\n\nepoll client\n\n2020\u5e743\u670823\u53f7 \u661f\u671f\u4e00 09:07\n\n\n\u8bf7\u5229\u7528epoll\u51fd\u6570\u6539\u5199\u57fa\u4e8eTCP\u7684\u56de\u97f3\u5ba2\u6237\u7aef\uff0c\u6ce8\u610f\u4f7f\u7528\u8fb9\u7f18\u89e6\u53d1\u6a21\u5f0f\uff0c\u7ba1\u7406\u6807\u51c6\u8f93\u5165\u548c\u5957\u63a5\u5b57\u63cf\u8ff0\u7b26\u3002\u56de\u97f3\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u7684\u4ee3\u7801\u5728\u6559\u6750\u6e90\u4ee3\u7801\u5305\u4e2d\uff0c\u672c\u6b21\u4f5c\u4e1a\u4ec5\u9700\u4fee\u6539\u5ba2\u6237\u7aef\uff0c\u57fa\u4e8eepoll\u7684\u670d\u52a1\u7aef\u5c06\u4f5c\u4e3a\u7b2c\u4e09\u6b21\u5b9e\u9a8c\u7684\u5185\u5bb9\u3002\n\n\u5ba2\u6237\u7aef\u4ee3\u7801\uff08\u4f7f\u7528epoll\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\uff09\n#include &lt;stdio.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;netinet/in.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;unistd.h&gt; //close()\n#include &lt;string.h&gt; //strcmp()\u7b49\u5b57\u7b26\u4e32\u64cd\u4f5c\u51fd\u6570\n#include &lt;stdlib.h&gt; //atoi() \u5b57\u7b26\u4e32\u8f6cint\n#include &lt;sys/epoll.h&gt;\n\nconst char* BIND_SERVER_IP = &quot;127.0.0.1&quot;;\nconst int BIND_PORT = 30303;\n\nint main(int argc, char *argv[]) {\n\n  // 1 \u521b\u5efatcp\u901a\u4fe1socket\n  int socket_fd = socket(AF_INET, SOCK_STREAM, 0);\n  if(socket_fd == -1){\n    perror(&quot;socket failed!\\n&quot;);\n  }\n\n  // 2 \u8fde\u63a5\u670d\u52a1\u5668\n  struct sockaddr_in server_addr = {0};//\u670d\u52a1\u5668\u7684\u5730\u5740\u4fe1\u606f\n  server_addr.sin_family = AF_INET;//IPv4\u534f\u8bae\n  server_addr.sin_port = htons(BIND_PORT);//\u670d\u52a1\u5668\u7aef\u53e3\u53f7\n  server_addr.sin_addr.s_addr = inet_addr(BIND_SERVER_IP);//\u8bbe\u7f6e\u670d\u52a1\u5668IP\n  int ret = connect(socket_fd, (struct sockaddr *)&amp;server_addr, sizeof(server_addr));\n  if(ret == -1){\n    perror(&quot;connect failed!\\n&quot;);\n  } else {\n    printf(&quot;connect server successful!\\n&quot;);\n  }\n\n  // \u521b\u5efaepoll\u76d1\u542c\u8fde\u63a5TCP\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u5426\u53ef\u8bfb\n  int epfd, nfds;\n  struct epoll_event event, events[3]; // \u6700\u591a\u5b58\u4e09\u4e2a\u89e6\u53d1\uff0c\u672c\u4f8b\u4e2d\u5b9e\u9645\u4e0a\u53ea\u4f1a\u5360\u7528\u4e00\u4e2a\n  epfd = epoll_create(1);\n  event.data.fd = socket_fd; // \u76d1\u542c\u8fde\u63a5\u670d\u52a1\u5668\u7684TCP\u6587\u4ef6\u63cf\u8ff0\u7b26\n  event.events = EPOLLIN | EPOLLET; // \u662f\u5426\u53ef\u90fd + \u8fb9\u7f18\u89e6\u53d1\uff08\u63cf\u8ff0\u7b26\u7531\u4e0d\u53ef\u8bfb\u53d8\u4e3a\u53ef\u8bfb\uff0c\u53ea\u901a\u77e5\u4e00\u6b21\uff09\n  epoll_ctl(epfd, EPOLL_CTL_ADD, socket_fd, &amp;event); // \u6ce8\u518c\n\n    //3 \u5faa\u73af\u53d1\u9001\u6d88\u606f\u3001\u63a5\u6536\u6d88\u606f\n  while(1){\n    char buf[1024] = {0};\n    printf(&quot;say something:&quot;);\n    // scanf(&quot;%s&quot;,buf); // \u4e0d\u8bc6\u522b\u7a7a\u683c\n    // gets(buf); // \u4e0d\u5b89\u5168\n    scanf(&quot;%[^\\n]%*c&quot;, buf); // \u8bc6\u522b\u7a7a\u683c\n    write(socket_fd, buf, strlen(buf)); //\u53d1\u9001\u6d88\u606f\n    memset(buf, 0, sizeof(buf));\n    // read(socket_fd, buf, sizeof(buf)); //\u963b\u585e\uff0c\u7b49\u5f85\u5ba2\u6237\u7aef\u53d1\u6765\u6d88\u606f\n    nfds = epoll_wait(epfd, events, 3, -1); // \u975e\u963b\u585e\u76d1\u542c\u56de\u4fe1\n    int i;\n    for (i = 0; i &lt; nfds; ++i) {\n      if (events[i].data.fd == socket_fd) {\n        // printf(&quot;hello world\\n&quot;);\n        read(socket_fd, buf, sizeof(buf));\n        printf(&quot;Receive: %s\\n&quot;, buf);\n      }\n    }\n    if(strcmp(buf, &quot;exit&quot;) == 0){\n      break;//\u9000\u51fa\u5faa\u73af\n    }\n  }\n\n  //4 \u5173\u95edsocket\n  close(socket_fd);\n\n  return 0;\n}\n\n\u9644\uff1a\u670d\u52a1\u7aef\u4ee3\u7801\uff08\u5355\u7ebf\u7a0b\u670d\u52a1\u7aef\uff09\n\n\u670d\u52a1\u7aef\u7684\u4f5c\u7528\u662f\u628a\u5ba2\u6237\u7aef\u53d1\u6765\u7684\u6d88\u606f\u518d\u53d1\u56de\u53bb\uff0c\u5b9e\u73b0\u201c\u56de\u97f3\u201d\u6548\u679c\n\n#include &lt;stdio.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;netinet/in.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;unistd.h&gt; //close()\n#include &lt;string.h&gt; //strcmp()\u7b49\u5b57\u7b26\u4e32\u64cd\u4f5c\u51fd\u6570\n#include &lt;stdlib.h&gt; //atoi() \u5b57\u7b26\u4e32\u8f6cint\n\n// const char* BIND_SERVER_IP = &quot;127.0.0.1&quot;;\nconst int BIND_PORT = 30303;\n\nint main(int argc, char *argv[]){\n\n  //1 \u521b\u5efatcp\u901a\u4fe1socket\n  int socket_fd = socket(AF_INET, SOCK_STREAM, 0);\n  if(socket_fd == -1){\n    perror(&quot;\u521b\u5efatcp\u901a\u4fe1socket\u5931\u8d25!\\n&quot;);\n    return -1;\n  }\n\n  //2 \u7ed1\u5b9asocket\u5730\u5740\n  struct sockaddr_in server_addr = {0};//\u5b58\u653e\u5730\u5740\u4fe1\u606f\n  server_addr.sin_family = AF_INET;//AF_INET-&gt;IPv4  \n  server_addr.sin_port = htons(BIND_PORT);//\u7aef\u53e3\u53f7\n  server_addr.sin_addr.s_addr = INADDR_ANY; //\u8ba9\u7cfb\u7edf\u68c0\u6d4b\u672c\u5730\u7f51\u5361\uff0c\u81ea\u52a8\u7ed1\u5b9a\u672c\u5730IP\n  int ret = bind(socket_fd, (struct sockaddr *) &amp;server_addr, sizeof(server_addr));\n  if(ret == -1){\n    perror(&quot;bind failed!\\n&quot;);\n    return -1;\n  }\n\n  //3 \u8bbe\u7f6e\u76d1\u542c\u961f\u5217\uff0c\u8bbe\u7f6e\u4e3a\u53ef\u4ee5\u63a5\u53d75\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\n  ret = listen(socket_fd, 5);\n  if(ret == -1){\n    perror(&quot;listen falied!\\n&quot;);\n  }\n\n  printf(&quot;server is running!\\n&quot;);\n\n  struct sockaddr_in client_addr = {0};//\u7528\u6765\u5b58\u653e\u5ba2\u6237\u7aef\u7684\u5730\u5740\u4fe1\u606f\n  socklen_t len = sizeof(client_addr);\n  int new_socket_fd = -1;//\u5b58\u653e\u4e0e\u5ba2\u6237\u7aef\u7684\u901a\u4fe1socket\n\n  //4 \u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5\n  new_socket_fd = accept( socket_fd, (struct sockaddr *)&amp;client_addr, &amp;len);\n  if(new_socket_fd == -1){\n    perror(&quot;accpet error!\\n&quot;);\n  } else {\n    printf(&quot;IP:%s, PORT:%d [connected]\\n&quot;, inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));\n  }\n\n    //\u5faa\u73af\u63a5\u6536\u4fe1\u606f\n  while(1){\n    char buf[1024] = {0};\n    read(new_socket_fd, buf, sizeof(buf)); //\u963b\u585e\uff0c,\u7b49\u5f85\u5ba2\u6237\u7aef\u53d1\u6765\u6d88\u606f\n    write(new_socket_fd, buf, strlen(buf)); //\u53d1\u9001\u6d88\u606f\n    printf(&quot;receive msg:%s\\n&quot;, buf); //\u6253\u5370\u6d88\u606f\n    if(strcmp(buf, &quot;exit&quot;) == 0){\n      break; //\u9000\u51fa\u5faa\u73af\n    }\n  }\n\n  //5 \u5173\u95edsocket\n  close(new_socket_fd);\n  close(socket_fd);\n\n  return 0;\n}\n\n\u7f16\u8bd1\u811a\u672c\n#!/bin/sh\necho &quot;\\n--------- project $1 start ---------\\n&quot;\ng++ -o $1 $1.c;./$@;echo &quot;\\n--------- project $1 end ---------\\n&quot;\nrm $1;\n\n\u8fd0\u884c\n\n\u5ba2\u6237\u7aef\n\n\n\n\u670d\u52a1\u7aef\n\n\n\u76f8\u5173\u77e5\u8bc6\u70b9\nepoll\u673a\u5236: epoll_create\u3001epoll_ctl\u3001epoll_wait\n\n\u5f15\u5165sys/epoll.h\u4f9d\u8d56\n\n#include &lt;sys/epoll.h&gt;\n\n1. \u521b\u5efaepoll\u53e5\u67c4\nint epfd = epoll_create(int size);\n\n\nsize\u7528\u6765\u544a\u8bc9\u5185\u6838\u8fd9\u4e2a\u76d1\u542c\u7684\u6570\u76ee\u4e00\u5171\u6709\u591a\u5927\n\n2. \u5c06\u88ab\u76d1\u542c\u7684\u63cf\u8ff0\u7b26\u6dfb\u52a0\u5230epoll\u53e5\u67c4\u6216\u4eceepool\u53e5\u67c4\u4e2d\u5220\u9664\u6216\u8005\u5bf9\u76d1\u542c\u4e8b\u4ef6\u8fdb\u884c\u4fee\u6539\nint epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)\n\n\n\u8be5\u51fd\u6570\u7528\u4e8e\u63a7\u5236\u67d0\u4e2aepoll\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0a\u7684\u4e8b\u4ef6\uff0c\u53ef\u4ee5\u6ce8\u518c\u4e8b\u4ef6\uff0c\u4fee\u6539\u4e8b\u4ef6\uff0c\u5220\u9664\u4e8b\u4ef6\u3002\n\n\n\u53c2\u6570\nepfd\uff1a\u7531 epoll_create \u751f\u6210\u7684epoll\u4e13\u7528\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1b\nop\uff1a\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\u4f8b\u5982\u6ce8\u518c\u4e8b\u4ef6\uff0c\u53ef\u80fd\u7684\u53d6\u503cEPOLL_CTL_ADD \u6ce8\u518c\u3001EPOLL_CTL_MOD \u4fee \u6539\u3001EPOLL_CTL_DEL \u5220\u9664\nfd\uff1a\u5173\u8054\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1b\nevent\uff1a\u6307\u5411epoll_event\u7684\u6307\u9488\uff1b\n\n\n\n\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fepoll_create()\u7684\u8fd4\u56de\u503c\n\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u52a8\u4f5c\uff0c\u7528\u4e09\u4e2a\u5b8f\u6765\u8868\u793a:\n|||\n|-|-|\n|EPOLL_CTL_ADD|\u6ce8\u518c\u65b0\u7684fd\u5230epfd\u4e2d|\n|EPOLL_CTL_MOD|\u4fee\u6539\u5df2\u7ecf\u6ce8\u518c\u7684fd\u7684\u76d1\u542c\u4e8b\u4ef6|\n|EPOLL_CTL_DEL|\u4eceepfd\u4e2d\u5220\u9664\u4e00\u4e2afd|\n\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u9700\u8981\u76d1\u542c\u7684fd\n\u7b2c\u56db\u4e2a\u53c2\u6570\u662f\u544a\u8bc9\u5185\u6838\u9700\u8981\u76d1\u542c\u4ec0\u4e48\u4e8b\u4ef6\uff0cstructepoll_event\u7ed3\u6784\u5982\u4e0b\uff1a\ntypedef union epoll_data {\nvoid *ptr;\nint fd;\n__uint32_t u32;\n__uint64_t u64;\n} epoll_data_t;\n\nstruct epoll_event {\n__uint32_t events; /* Epoll events */\nepoll_data_t data; /* User data variable */\n};\n\nevents\u53ef\u4ee5\u662f\u4ee5\u4e0b\u51e0\u4e2a\u5b8f\u7684\u96c6\u5408\uff1a\n|||\n|-|-|\n|EPOLLIN|\u89e6\u53d1\u8be5\u4e8b\u4ef6\uff0c\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0a\u6709\u53ef\u8bfb\u6570\u636e\u3002(\u5305\u62ec\u5bf9\u7aefSOCKET\u6b63\u5e38\u5173\u95ed)\uff1b|\n|EPOLLOUT|\u89e6\u53d1\u8be5\u4e8b\u4ef6\uff0c\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0a\u53ef\u4ee5\u5199\u6570\u636e\uff1b|\n|EPOLLPRI|\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u7d27\u6025\u7684\u6570\u636e\u53ef\u8bfb\uff08\u8fd9\u91cc\u5e94\u8be5\u8868\u793a\u6709\u5e26\u5916\u6570\u636e\u5230\u6765\uff09\uff1b|\n|EPOLLERR|\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d1\u751f\u9519\u8bef\uff1b|\n|EPOLLHUP|\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u88ab\u6302\u65ad\uff1b|\n|EPOLLET|\u5c06EPOLL\u8bbe\u4e3a\u8fb9\u7f18\u89e6\u53d1(Edge Triggered)\u6a21\u5f0f\uff0c\u8fd9\u662f\u76f8\u5bf9\u4e8e\u6c34\u5e73\u89e6\u53d1(Level Triggered)\u6765\u8bf4\u7684\uff1b|\n|EPOLLONESHOT|\u53ea\u76d1\u542c\u4e00\u6b21\u4e8b\u4ef6\uff0c\u5f53\u76d1\u542c\u5b8c\u8fd9\u6b21\u4e8b\u4ef6\u4e4b\u540e\uff0c\u5982\u679c\u8fd8\u9700\u8981\u7ee7\u7eed\u76d1\u542c\u8fd9\u4e2asocket\u7684\u8bdd\uff0c\u9700\u8981\u518d\u6b21\u628a\u8fd9\u4e2asocket\u52a0\u5165\u5230EPOLL\u961f\u5217\u91cc\u3002|\n3.\u7b49\u5f85\u4e8b\u4ef6\u89e6\u53d1\uff0c\u5f53\u8d85\u8fc7timeout\u8fd8\u6ca1\u6709\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0c\u5c31\u8d85\u65f6\u3002\nint epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);\n\n\u8be5\u51fd\u6570\u7528\u4e8e\u8f6e\u8be2I/O\u4e8b\u4ef6\u7684\u53d1\u751f\uff0c\u5373\u7b49\u5f85\u4e8b\u4ef6\u7684\u4ea7\u751f\uff0c\u7c7b\u4f3c\u4e8eselect()\u8c03\u7528\u3002\u53c2\u6570events\u7528\u6765\u4ece\u5185\u6838\u5f97\u5230\u4e8b\u4ef6\u7684\u96c6\u5408\uff0cmaxevents\u544a\u4e4b\u5185\u6838\u8fd9\u4e2aevents\u6709\u591a\u5927(\u6570\u7ec4\u6210\u5458\u7684\u4e2a\u6570)\uff0c\u8fd9\u4e2amaxevents\u7684\u503c\u4e0d\u80fd\u5927\u4e8e\u521b\u5efaepoll_create()\u65f6\u7684size\uff0c\u53c2\u6570timeout\u662f\u8d85\u65f6\u65f6\u95f4\uff08\u6beb\u79d2\uff0c0\u4f1a\u7acb\u5373\u8fd4\u56de\uff0c-1\u4e3a\u963b\u585e\uff09\u3002\n\u8be5\u51fd\u6570\u8fd4\u56de\u9700\u8981\u5904\u7406\u7684\u4e8b\u4ef6\u6570\u76ee\uff0c\u5982\u8fd4\u56de0\u8868\u793a\u5df2\u8d85\u65f6\u3002\n\u8fd4\u56de\u7684\u4e8b\u4ef6\u96c6\u5408\u5728events\u6570\u7ec4\u4e2d\uff0c\u6570\u7ec4\u4e2d\u5b9e\u9645\u5b58\u653e\u7684\u6210\u5458\u4e2a\u6570\u662f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002\u8fd4\u56de0\u8868\u793a\u5df2\u7ecf\u8d85\u65f6\u3002\n\n\u53c2\u6570\uff1a\n\nepfd:\u7531epoll_create \u751f\u6210\u7684epoll\u4e13\u7528\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1b\nepoll_event:\u7528\u4e8e\u56de\u4f20\u4ee3\u5904\u7406\u4e8b\u4ef6\u7684\u6570\u7ec4\uff1b\nmaxevents:\u6bcf\u6b21\u80fd\u5904\u7406\u7684\u4e8b\u4ef6\u6570\uff1b\ntimeout: \u7b49\u5f85I/O\u4e8b\u4ef6\u53d1\u751f\u7684\u8d85\u65f6\u503c\u3002-1\u76f8\u5f53\u4e8e\u963b\u585e\uff0c0\u76f8\u5f53\u4e8e\u975e\u963b\u585e\u3002\u4e00\u822c\u7528-1\u5373\u53ef\n\n\n\u8fd4\u56de\u53d1\u751f\u4e8b\u4ef6\u6570\u3002\n\n\n4. ET\u4e0eLT\nEPOLL\u4e8b\u4ef6\u6709\u4e24\u79cd\u6a21\u578b\uff1a\n\nET\uff1a\u8fb9\u7f18\u89e6\u53d1\u6a21\u5f0f\nLT\uff1a\u6c34\u5e73\u89e6\u53d1\u6a21\u5f0f\n\n\n\n\n  \n  \n\n\n\n\n  Edge Triggered(ET)\n  \u9ad8\u901f\u5de5\u4f5c\u65b9\u5f0f\uff0c\u9519\u8bef\u7387\u6bd4\u8f83\u5927\uff0c\u53ea\u652f\u6301no_block socket\u00a0(\u975e\u963b\u585esocket)\n\n\n  LevelTriggered(LT)\n  \u7f3a\u7701\u5de5\u4f5c\u65b9\u5f0f\uff0c\u5373\u9ed8\u8ba4\u7684\u5de5\u4f5c\u65b9\u5f0f,\u652f\u6301blocksocket\u548cno_blocksocket\uff0c\u9519\u8bef\u7387\u6bd4\u8f83\u5c0f\u3002\n\n\n\n\u6c34\u5e73\u89e6\u53d1\n1. \u5bf9\u4e8e\u8bfb\u64cd\u4f5c\n\u53ea\u8981\u7f13\u51b2\u5185\u5bb9\u4e0d\u4e3a\u7a7a\uff0cLT\u6a21\u5f0f\u8fd4\u56de\u8bfb\u5c31\u7eea\u3002\n2. \u5bf9\u4e8e\u5199\u64cd\u4f5c\n\u53ea\u8981\u7f13\u51b2\u533a\u8fd8\u4e0d\u6ee1\uff0cLT\u6a21\u5f0f\u4f1a\u8fd4\u56de\u5199\u5c31\u7eea\u3002\n\u8fb9\u7f18\u89e6\u53d1\n1. \u5bf9\u4e8e\u8bfb\u64cd\u4f5c\n\uff081\uff09\u5f53\u7f13\u51b2\u533a\u7531\u4e0d\u53ef\u8bfb\u53d8\u4e3a\u53ef\u8bfb\u7684\u65f6\u5019\uff0c\u5373\u7f13\u51b2\u533a\u7531\u7a7a\u53d8\u4e3a\u4e0d\u7a7a\u7684\u65f6\u5019\u3002\n\uff082\uff09\u5f53\u6709\u65b0\u6570\u636e\u5230\u8fbe\u65f6\uff0c\u5373\u7f13\u51b2\u533a\u4e2d\u7684\u5f85\u8bfb\u6570\u636e\u53d8\u591a\u7684\u65f6\u5019\u3002\n\uff083\uff09\u5f53\u7f13\u51b2\u533a\u6709\u6570\u636e\u53ef\u8bfb\uff0c\u4e14\u5e94\u7528\u8fdb\u7a0b\u5bf9\u76f8\u5e94\u7684\u63cf\u8ff0\u7b26\u8fdb\u884cEPOLL_CTL_MOD\u4fee\u6539EPOLLIN\u4e8b\u4ef6\u65f6\u3002\n2. \u5bf9\u4e8e\u5199\u64cd\u4f5c\n\n\uff081\uff09\u5f53\u7f13\u51b2\u533a\u7531\u4e0d\u53ef\u5199\u53d8\u4e3a\u53ef\u5199\u65f6\u3002\n\uff082\uff09\u5f53\u6709\u65e7\u6570\u636e\u88ab\u53d1\u9001\u8d70\uff0c\u5373\u7f13\u51b2\u533a\u4e2d\u7684\u5185\u5bb9\u53d8\u5c11\u7684\u65f6\u5019\u3002\n\uff083\uff09\u5f53\u7f13\u51b2\u533a\u6709\u7a7a\u95f4\u53ef\u5199\uff0c\u4e14\u5e94\u7528\u8fdb\u7a0b\u5bf9\u76f8\u5e94\u7684\u63cf\u8ff0\u7b26\u8fdb\u884cEPOLL_CTL_MOD\u4fee\u6539EPOLLOUT\u4e8b\u4ef6\u65f6\u3002\n\n\u53c2\u8003\u8d44\u6599\n\nepoll \u6c34\u5e73\u89e6\u53d1\u4e0e\u8fb9\u7f18\u89e6\u53d1\nC++\u56de\u58f0\u670d\u52a1\u5668_9-epoll\u8fb9\u7f18\u89e6\u53d1\u6a21\u5f0f\u7248\u672c\u670d\u52a1\u5668\nepoll\u673a\u5236:epoll_create\u3001epoll_ctl\u3001epoll_wait\u3001close\n\n\nProducer vs. Consumer --Circular Queue\n\n\u9898\u91cf\uff1a 1\n\u6ee1\u5206\uff1a 100 \u5206\n\u521b\u5efa\u8005\uff1a\u674e\u6c81\n\u622a\u6b62\u65f6\u95f4\uff1a2020-04-09 10:00\n\u4f5c\u4e1a\u6539\u5199\u6210\u73af\u5f62\u7f13\u5b58\u961f\u5217\n\n\n\u5206\u6790\n\n[x] \u6240\u7ed9\u7684\u4ee3\u7801\u622a\u56fe\u91c7\u7528\u751f\u4ea7\u8005-\u7f13\u5b58Quene-\u6d88\u8d39\u8005\u6a21\u5f0f\u5728\u591a\u7ebf\u7a0b\u5e76\u53d1\u573a\u666f\u4e0b\u5904\u7406\u6570\u636e\u3002\n[x] \u751f\u4ea7\u8005\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u6d88\u8d39\u8005\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5171\u7528\u7f13\u5b58\u961f\u5217\u3002\n[x] \u751f\u4ea7\u8005\u8d1f\u8d23\u5236\u9020\uff08\u63a5\u6536\uff09\u5f85\u5904\u7406\u6570\u636e\uff0c\u5411\u7f13\u5b58\u4e2d\u6dfb\u52a0\u6570\u636e\u3002\u6d88\u8d39\u8005\u8d1f\u8d23\u5904\u7406\u5f85\u5904\u7406\u6570\u636e\uff0c\u4ece\u7f13\u5b58\u4e2d\u53d6\u51fa\u6570\u636e\u5e76\u9500\u6bc1\u6216\u6807\u8bb0\u4e3a\u53ef\u7528\u72b6\u6001\u3002\u4e24\u4e2a\u7ebf\u7a0b\u76f8\u4e92\u72ec\u7acb\uff0c\u4ec5\u5728\u64cd\u4f5c\u7f13\u5b58\u961f\u5217\u65f6\u9700\u8981\u76f8\u4e92\u907f\u8ba9\u3002\n\u7ebf\u7a0b\u4e4b\u95f4\u901a\u8fc7\u4fe1\u53f7\u91cf\u8fdb\u884c\u907f\u8ba9\u64cd\u4f5c\uff0c\u907f\u514d\u540c\u65f6\u64cd\u4f5c\u7f13\u5b58\u5f15\u8d77\u810f\u6570\u636e\u3002\n[x] \u751f\u4ea7\u8005\u7ebf\u7a0b\u3001\u6d88\u8d39\u8005\u7ebf\u7a0b\u3001\u7f13\u5b58\u961f\u5217\u4e09\u8005\u76f8\u8f85\u76f8\u6210\uff0c\u6784\u6210\u6709\u673a\u6574\u4f53\uff0c\u53ef\u4ee5\u5f02\u6b65\u5904\u7406\u591a\u7ebf\u7a0b\u5e76\u53d1\u95ee\u9898\u3002\n\n\u6539\u7528\u73af\u5f62\u961f\u5217\u4f5c\u4e3a\u961f\u5217\u7f13\u5b58\u7684\u6570\u636e\u7ed3\u6784\n\n[x] \u4ee3\u7801\u53c2\u8003\u4e86\u8001\u5e08\u7ed9\u7684\u4ee3\u7801\u601d\u8def\uff0c\u81ea\u5df1\u91cd\u5199\u6a21\u62df\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b\u3002\n[x] \u6539\u7528\u73af\u5f62\u961f\u5217\u4f5c\u4e3a\u7f13\u5b58(RingBuffer)\u3002\n[x] RingBuffer\u91c7\u7528\u6570\u7ec4\u5b9e\u73b0\uff0c\u6700\u5927\u53ef\u63d0\u4f9b\u5f97\u5e76\u53d1\u8bbf\u95ee\u7531MAX_COUNT\u51b3\u5b9a\u3002\n[x] \u6a21\u578b\u901a\u8fc7\u5f02\u6b65\u5411\u6570\u636e\u5e93\u63d2\u5165\u5b66\u751f\u4fe1\u606f\uff08\u59d3\u540d\u3001\u5b66\u53f7\u3001\u73ed\u7ea7\uff09\u3002\u5411\u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u901a\u8fc7\u7ebf\u7a0b\u5ef6\u8fdf10ms\u6a21\u62df\u3002\n[x] \u516c\u5171\u53d8\u91cf\u91c7\u7528pthread\u7684\u4e92\u65a5\u9501\u4fdd\u8bc1\u6570\u636e\u5b8c\u6574\u3002\n[x] \u5b9e\u73b0\u73af\u5f62\u7f13\u5b58\u7684\u5173\u952e\u51fd\u6570\uff1agetRingBufferIndex(requestID)\n[x] \u5982\u679cringBuffer\u5bb9\u91cf\u5df2\u6ee1\uff0c\u4f1a\u76f4\u63a5\u4e22\u5f03\u8bf7\u6c42\n[x] thread3, thread4\u76f8\u5173\u4ee3\u7801\u9ed8\u8ba4\u6ce8\u91ca\u72b6\u6001\uff0c\u7528\u6765\u6d4b\u8bd5\u8fde\u7eed\u4e24\u6b21\u6709\u8f83\u957f\u65f6\u95f4\u95f4\u9694\u7684\u5e76\u53d1\u8bf7\u6c42\u6570 &gt; \u7f13\u5b58\u6700\u5927\u5bb9\u91cf\u65f6\u7684\u60c5\u51b5\u3002\n\n\u4ee3\u78011-\u5b9a\u4e49\u73af\u5f62\u7f13\u5b58ringBuffer\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#ifndef ringBuffer_h\n#define ringBuffer_h\n\n// insert into db\n// \u5f85\u5904\u7406\u7684\u6570\u636e\u683c\u5f0f\ntypedef struct {\n  char *stu_name;  // \u59d3\u540d\n  char *stu_stuID; // \u5b66\u53f7\n  int age;     // \u5e74\u9f84\n} StuInfo;\n\n// ringBuffer item\n// \u73af\u5f62\u961f\u5217\u5b58\u50a8\u5355\u5143\ntypedef struct RingBufferItem {\n  StuInfo stuInfo; // \u5b66\u751f\u6570\u636e\n  int enable;      // \u7f13\u5b58\u72b6\u6001\uff08\u5bf9\u751f\u4ea7\u8005\u6765\u8bf4\uff09\uff0c0\u53ef\u7528\uff0c1\u6709\u672a\u5904\u7406\u6570\u636e\n} *RingBuffer;\n\n/* \u521b\u5efa\u73af\u5f62\u961f\u5217 */\nRingBuffer init_ringBuffer(int size) {\n  RingBuffer ringBuffer;\n  if (size &gt; 0) {\n    // printf(&quot;struct RingBufferItem size is : %ld\\n&quot;, sizeof(struct RingBufferItem));\n    ringBuffer = (RingBuffer)malloc(sizeof(RingBufferItem) * size);\n    for (int i = 0; i &lt; size; i++) {\n      (ringBuffer + i)-&gt;enable = 1;\n    }\n    return ringBuffer;\n  } else {\n    return NULL;\n  }\n}\n\n#endif\n\n\u4ee3\u78012-\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u8fd0\u884c\u6a21\u578b\n\n#include &lt;stdio.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;unistd.h&gt;\n#include &quot;ringBuffer.h&quot;\n\n/* \u7f13\u5b58\u5bb9\u91cf*/\n#define MAX_COUNT 5\n/* \u6d4b\u8bd5\u5e76\u53d1\u91cf */\n#define TEST_COUNT 10;\n/* \u5b9a\u4e49\u73af\u5f62\u6570\u7ec4 */\nRingBuffer ringBuffer;\n/* \u5b9a\u4e49requestID\uff08\u81ea\u589eID\uff09 */\nint requestID; // \u751f\u4ea7\u8005\u8bf7\u6c42\u5e8f\u53f7\n/* \u5b9a\u4e49\u4e92\u65a5\u9501 */\npthread_mutex_t mutex_for_requestID;\npthread_mutex_t mutex_for_ringBuffer;\n/* \u4e3a\u6d88\u8d39\u8005\u5b9a\u4e49\u5df2\u5904\u7406\u8bf7\u6c42\u6570\uff0c\u4f5c\u4e3a\u6d88\u8d39\u8005\u5faa\u73af\u5904\u7406\u6570\u636e\u7684\u5224\u65ad */\nint requestDone; // \u6d88\u8d39\u8005\u5904\u7406\u5e8f\u53f7\n\n/* --- methods --- */\n\n/* \u8ba1\u7b97\u73af\u5f62\u961f\u5217\u7684\u7d22\u5f15\u53f7 */\nint getRingBufferIndex(int request_index);\n/* \u751f\u4ea7\u8005 */\nvoid *eventFactory_start(void *myvar);\n/* \u6d88\u8d39\u8005 */\nvoid *eventHandler_start(void *myvar);\n/* \u52a0\u9501 */\nvoid my_pthread_mutex_lock(pthread_mutex_t *mutex);\n\n\nint main(int argc, char *argv[]){\n\n  // printf(&quot;%d\\n&quot;, getRingBufferIndex(requestID++));\n  // exit(0);\n\n  // \u521d\u59cb\u5316\u9501\n  pthread_mutex_init(&amp;mutex_for_requestID, NULL);\n  pthread_mutex_init(&amp;mutex_for_ringBuffer, NULL);\n  // \u521d\u59cb\u5316\u73af\u5f62\u961f\u5217\n  // \u6d45\u62f7\u8d1d\u8fd4\u56de\u503c\n  ringBuffer = init_ringBuffer(MAX_COUNT);\n  requestID = -1;\n  requestDone = -1;\n  // for(int i = 0; i &lt; MAX_COUNT; i++) {\n  //   printf(&quot;buffer[%d].enable = %d\\n&quot;, i, (ringBuffer + i)-&gt;enable);\n  // }\n\n  pthread_t thread1, thread2;\n  // pthread_t\tthread3, thread4;\n\n  int ret1, ret2;\n\n  ret1 = pthread_create(&amp;thread1, NULL, eventFactory_start, NULL);\n  ret2 = pthread_create(&amp;thread2, NULL, eventHandler_start, NULL);\n\n  pthread_join(thread1, NULL);\n  pthread_join(thread2, NULL);\n\n  // sleep(1);\n  // ret1 = pthread_create(&amp;thread3, NULL, eventFactory_start, NULL);\n  // ret2 = pthread_create(&amp;thread4, NULL, eventHandler_start, NULL);\n  // pthread_join(thread3, NULL);\n  // pthread_join(thread4, NULL);\n\n  printf(&quot;producer thread ret1 = %d\\n&quot;, ret1);\n  printf(&quot;consumer thread ret2 = %d\\n&quot;, ret2);\n\n  return 0;\n}\n\n/* \u8ba1\u7b97\u73af\u5f62\u961f\u5217\u7684\u7d22\u5f15\u53f7 */\nint getRingBufferIndex(int request_index) {\n  return request_index % MAX_COUNT;\n}\n\n/* \u52a0\u9501 */\nvoid my_pthread_mutex_lock(pthread_mutex_t *mutex) {\n  if (pthread_mutex_lock(mutex) != 0){\n    printf(&quot;lock error!\\n&quot;);\n    exit(0);\n  }\n}\n\n/* \u751f\u4ea7\u8005 */\nvoid *eventFactory_start(void *myvar) {\n  // \u5e76\u53d1\u653e\u51651000\u4e2a\u6d4b\u8bd5\u6570\u636e\n  for(int i = 0; i &lt; 15; i++) {\n    // --- mock\u6570\u636e\u751f\u6210\u5f00\u59cb ---\n    char *stu_name = (char*)malloc(sizeof(char) * 64);\n    char *stu_stuID = (char*)malloc(sizeof(char) * 64);\n    sprintf(stu_name, &quot;\u59d3\u540d[%d]&quot;, i);\n    sprintf(stu_stuID, &quot;ID[%d]&quot;, i);\n    // printf(&quot;\u59d3\u540d = %s\\n&quot;, stu_name);\n    // printf(&quot;ID = %s\\n&quot;, stu_stuID);\n    int age = i;\n    // --- mock\u6570\u636e\u751f\u6210\u7ed3\u675f ---\n    // requestID \u52a0\u9501\n    my_pthread_mutex_lock(&amp;mutex_for_requestID);\n    requestID++;\n    int current_requestID = requestID;\n    // ringBuffer \u52a0\u9501\n    my_pthread_mutex_lock(&amp;mutex_for_ringBuffer);\n    // printf(&quot;current_requestID = %d\\n&quot;, current_requestID);\n    int ringBufferIndex = getRingBufferIndex(current_requestID);\n    if((ringBuffer + ringBufferIndex)-&gt;enable == 0) {\n      printf(&quot;\u2612 \u5e76\u53d1\u6570\u8fbe\u5230\u6700\u5927\uff0c\u5df2\u4e22\u5f03\u8bf7\u6c42\u5b66\u751f(%s)\u521b\u5efa\u7684\u8bf7\u6c42\\n&quot;, stu_name);\n      requestID--;\n      // requestID \u89e3\u9501\n      pthread_mutex_unlock(&amp;mutex_for_requestID);\n    } else {\n      // requestID \u89e3\u9501\n      pthread_mutex_unlock(&amp;mutex_for_requestID);\n      // \u5411\u7f13\u5b58\u6dfb\u52a0\u6a21\u62df\u6570\u636e\n      (ringBuffer + ringBufferIndex)-&gt;stuInfo.stu_name = stu_name;\n      (ringBuffer + ringBufferIndex)-&gt;stuInfo.stu_stuID = stu_stuID;\n      (ringBuffer + ringBufferIndex)-&gt;stuInfo.age = age;\n      (ringBuffer + ringBufferIndex)-&gt;enable = 0;\n      printf(&quot;\u2192 \u5b66\u751f(%s)\u5df2\u521b\u5efa\u4efb\u52a1\\n&quot;, (ringBuffer + ringBufferIndex)-&gt;stuInfo.stu_name);\n    }\n    // ringBuffer \u89e3\u9501\n    pthread_mutex_unlock(&amp;mutex_for_ringBuffer);\n  }\n}\n\n/* \u6d88\u8d39\u8005 */\nvoid *eventHandler_start(void *myvar) {\n  int timeout_count = 10;\n  int current_timeout_count = 0;\n  while(1) {\n    // requestID \u52a0\u9501\n    my_pthread_mutex_lock(&amp;mutex_for_requestID);\n    if (requestDone &lt; requestID) { // \u8bfbrequestID\u6682\u4e0d\u52a0\u9501\n      // requestID \u89e3\u9501\n      pthread_mutex_unlock(&amp;mutex_for_requestID);\n      // \u6709\u65b0\u8bf7\u6c42\u5904\u7406\n      requestDone++;\n      int ringBufferIndex = getRingBufferIndex(requestDone);\n      // ringBuffer \u52a0\u9501\n      my_pthread_mutex_lock(&amp;mutex_for_ringBuffer);\n      // \u6570\u636e\u5904\u7406\uff0c\u5047\u88c5 insert into table...\n      sleep(0.001);\n      printf(&quot;\u2611 \u5b66\u751f(%s)\u5df2\u63d2\u5165\u6570\u636e\u8868!\\n&quot;, (ringBuffer + ringBufferIndex)-&gt;stuInfo.stu_name);\n      (ringBuffer + ringBufferIndex)-&gt;enable = 1;\n      // ringBuffer \u89e3\u9501\n      pthread_mutex_unlock(&amp;mutex_for_ringBuffer);\n    } else {\n      // requestID \u89e3\u9501\n      pthread_mutex_unlock(&amp;mutex_for_requestID);\n      // \u6d88\u8d39\u8005\u4f11\u606f50ms\n      sleep(0.05);\n      // current_timeout_count++;\n      // if (timeout_count == current_timeout_count) {\n      //   break;\n      // }\n    }\n  }\n}\n\n\u8fd0\u884c\u7ed3\u679c\n\n\u5f53\u5e76\u53d1\u8bf7\u6c42\u6570 &lt;= \u7f13\u5b58\u6700\u5927\u5bb9\u91cf\u65f6\uff08\u6a21\u62df\u67d0\u4e00\u65f6\u95f4\u70b9\u5c0f\u80a1\u5e76\u53d1\uff09\n\n\n\n\u5f53\u5e76\u53d1\u8bf7\u6c42\u6570 &gt; \u7f13\u5b58\u6700\u5927\u5bb9\u91cf\u65f6\uff08\u6a21\u62df\u67d0\u4e00\u65f6\u95f4\u70b9\u5927\u91cf\u5e76\u53d1\uff09\n\n\n\n\u5f53\u8fde\u7eed\u4e24\u6b21\u6709\u8f83\u957f\u65f6\u95f4\u95f4\u9694(\u76f8\u96941s)\u7684\u5e76\u53d1\u8bf7\u6c42\u6570 &gt; \u7f13\u5b58\u6700\u5927\u5bb9\u91cf\uff0c\u65f6\uff08\u6a21\u62df\u4e24\u4e2a\u8f83\u957f\u65f6\u95f4\u95f4\u9694\u7684\u5927\u91cf\u5e76\u53d1\uff0c\u7528\u6765\u6d4b\u8bd5\u73af\u5f62\u7f13\u5b58\u662f\u5426\u4e3a\u73af\u72b6\u3001\u540c\u4e00\u5757\u7f13\u5b58\u662f\u5426\u590d\u7528\uff09\n\n\n\u53c2\u8003\u8d44\u6599\n\n\u7279\u6b8a\u6587\u5b57\u56fe\u6807\u7b26\u53f7\nLinux\u7ebf\u7a0b\u540c\u6b65\u4e4b\u2014\u2014\u4e92\u65a5\u91cf(Mutex)\nlinux\u4e2d\u7684C\u91cc\u9762\u4f7f\u7528pthread_mutex_t\u9501\n\n\u8f6c\u8f7d\n\n\u8f6c\u8f7d\u81eahttps://blog.webpro.ltd\n\n", "categories": [{"name": "\u65e5\u5e38\u6280\u5de7", "slug": "\u65e5\u5e38\u6280\u5de7", "permalink": "/category/%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7/"}, {"name": "linux", "slug": "linux", "permalink": "/category/linux/"}], "tags": [{"name": "Unix", "slug": "Unix", "permalink": "/tag/Unix/"}]}, {"title": "fzf\u5b89\u88c5\u914d\u7f6e", "date": "2020-08-23T17:27:00-00.00", "path": "/archives/fzf/", "text": "\u5b89\u88c5\n\nbrew install fzf\n\n\u5feb\u6377\u952e\u5b89\u88c5\n\n$(brew --prefix)/opt/fzf/install\n\n\u5b89\u88c5\u597d\u540e\u6309\u7167\u63d0\u793a\u5237\u65b0shell\n\u914d\u7f6e\nzshrc\n\n#export FZF_DEFAULT_OPTS='--bind=ctrl-t:top,change:top --bind ctrl-e:down,ctrl-u:up'\nexport FZF_DEFAULT_OPTS='--bind ctrl-e:down,ctrl-u:up --preview &quot;[[ $(file --mime {}) =~ binary ]] &amp;&amp; echo {} is a binary file || (ccat --color=always {} || highlight -O ansi -l {} || cat {}) 2&gt; /dev/null | head -500&quot;'\n#export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g &quot;&quot;'\nexport FZF_DEFAULT_COMMAND='fd'\nexport FZF_COMPLETION_TRIGGER='\\'\nexport FZF_TMUX=1\nexport FZF_TMUX_HEIGHT='80%'\nexport fzf_preview_cmd='[[ $(file --mime {}) =~ binary ]] &amp;&amp; echo {} is a binary file || (ccat --color=always {} || highlight -O ansi -l {} || cat {}) 2&gt; /dev/null | head -500'\n\nranger\n\nrc.conf\n\n\nmap &lt;C-f&gt; fzf_select\n\n\ncommands.py\n\n\nclass fzf_select(Command):\n    &quot;&quot;&quot;\n    :fzf_select\n    Find a file using fzf.\n    With a prefix argument select only directories.\n    See: https://github.com/junegunn/fzf\n    &quot;&quot;&quot;\n    def execute(self):\n        import subprocess\n        import os.path\n        if self.quantifier:\n            # match only directories\n            command = &quot;find -L . \\( -path '*/\\.*' -o -fstype 'dev' -o -fstype 'proc' \\) -prune \\\n            -o -type d -print 2&gt; /dev/null | sed 1d | cut -b3- | fzf +m&quot;\n\n        else:\n            # match files and directories\n            command = &quot;find -L . \\( -path '*/\\.*' -o -fstype 'dev' -o -fstype 'proc' \\) -prune \\\n            -o -print 2&gt; /dev/null | sed 1d | cut -b3- | fzf +m&quot;\n\n        fzf = self.fm.execute_command(command,\n                                      universal_newlines=True,\n                                      stdout=subprocess.PIPE)\n        stdout, stderr = fzf.communicate()\n        if fzf.returncode == 0:\n            fzf_file = os.path.abspath(stdout.rstrip('\\n'))\n            if os.path.isdir(fzf_file):\n                self.fm.cd(fzf_file)\n            else:\n                self.fm.select_file(fzf_file)\n\n", "categories": [{"name": "\u65e5\u5e38\u6280\u5de7", "slug": "\u65e5\u5e38\u6280\u5de7", "permalink": "/category/%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7/"}, {"name": "linux", "slug": "linux", "permalink": "/category/linux/"}], "tags": [{"name": "fzf", "slug": "fzf", "permalink": "/tag/fzf/"}, {"name": "mac", "slug": "mac", "permalink": "/tag/mac/"}]}, {"title": "iPhone\u68c0\u67e5", "date": "2020-08-13T17:27:00-00.00", "path": "/archives/iphone-check/", "text": "\u7231\u601d\u52a9\u624b\n\n\u867d\u7136\u53ef\u4ee5\u4fee\u6539\u6210\u5168\u7eff\uff0c\u4f46\u662f\u5982\u679c\u6709\u7ea2\u90a3\u5c31\u662f\u5fc5\u7136\u6709\u95ee\u9898\n\n\u68c0\u67e5\u8bb0\u5f55\n\n\u67e5\u770b\u662f\u5426\u6709\u5f88\u591a\u975e\u6b63\u5e38\u91cd\u542f\u8bb0\u5f55\n\u8bbe\u7f6e-\u9690\u79c1-\u5206\u6790\u4e0e\u6539\u8fdb-\u5206\u6790\u6570\u636e-panic-full(\u975e\u6b63\u5e38\u91cd\u542f\u8bb0\u5f55)\n\n\u662f\u5426\u6709\u9501\n\n\u8bbe\u7f6e-\u901a\u7528-\u8fd8\u539f\n\u5f00\u673a\u540e\u63d2\u5361\u6fc0\u6d3b\n\nGPS\n\n\u6253\u5f00\u5730\u56feapp\n\nSiri\n\n\u6253\u5f00Siri\u6d4b\u8bd5\n\n\u58f0\u97f3\n\n\u8bbe\u7f6e\u94c3\u58f0\u6d4b\u8bd5\u626c\u58f0\u5668\n\u6253\u5f00\u8bed\u97f3\u5907\u5fd8\u5f55-\u5f55\u97f3-\u64ad\u653e\u6d4b\u8bd5\n\n\u663e\u793a\n\n\u663e\u793a\u4e0e\u4eae\u5ea6-\u8c03\u8282\u4eae\u5ea6(\u53ef\u4ee5\u7528\u624b\u673a\u95ea\u5149\u706f\u8fdb\u884c\u6d4b\u8bd5)\n\u6253\u5f00\u5173\u95ed\u539f\u5f69\u663e\u793a\n\u6253\u5f00\u7eaf\u8272\u80cc\u666f\u68c0\u67e5\u662f\u5426\u6709\u574f\u70b9\uff08\u62e8\u53f7\u754c\u9762\u3001\u6307\u5357\u9488\u754c\u9762\uff09\n\n\u4eba\u8138\u8bc6\u522b\n\n\u68c0\u67e53D\u4eba\u8138\u8bc6\u522b\n\n\u5c4f\u5e55\u89e6\u63a7\n\n\u6309\u4f4f\u56fe\u6807\u5168\u5c4f\u62d6\u52a8\u6d4b\u8bd5\n\n\u5b9e\u4f53\u6309\u952e\n\n\u7535\u6e90\u952e\n\u97f3\u91cf\u52a0\u51cf\u952e\n\u9759\u97f3\u952e\n\u7535\u6e90\u52a0\u97f3\u91cf\u52a0\u952e\u622a\u5c4f\n\n\u76f8\u673a\n\n\u76f8\u673a\u8fde\u62cd\u662f\u5426\u4f1a\u5361\n\u5bf9\u7126\u6210\u7247\u662f\u5426\u4f1a\u6709\u95ee\u9898\n\u524d\u540e\u7f6e\u6d4b\u8bd5\u4ee5\u53ca\u89c6\u9891\u6d4b\u8bd5\n\n\u901a\u8bdd\u6d4b\u8bd5\n\n\u6253\u7535\u8bdd\u6d4b\u8bd5\n\n\u8fdb\u6c34\u68c0\u67e5\n\nSIM\u5361\u69fd\u51fa\u6709\u4e00\u5904\u767d\u6761(\u53ef\u5f00\u95ea\u5149\u706f\u770b)\n\u8fdb\u6c34\u4f1a\u53d8\u6210\u7ea2\u8272\n\n\u5176\u4ed6\u6d4b\u8bd5\n\nWiFi\u6d4b\u8bd5\n\u84dd\u7259\u6d4b\u8bd5\n\n", "categories": [{"name": "\u65e5\u5e38\u6280\u5de7", "slug": "\u65e5\u5e38\u6280\u5de7", "permalink": "/category/%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7/"}], "tags": [{"name": "iPhone", "slug": "iPhone", "permalink": "/tag/iPhone/"}]}, {"title": "Mysql\u5e38\u7528\u547d\u4ee4", "date": "2020-08-08T18:57:00-00.00", "path": "/archives/mysql/", "text": "\u5b89\u88c5\n\nsudo apt install mysql-server          #\u670d\u52a1\u7aef\nsudo apt install mysql-client          #\u5ba2\u6237\u7aef\nsudo apt install libmysqlclient-dev    #\u7a0b\u5e8f\u7f16\u8bd1\u65f6\u94fe\u63a5\u7684\u5e93\n\n\n\u68c0\u67e5\u662f\u5426\u5b89\u88c5\u597d\n\n\nsudo netstat -tap | grep mysql\n\n\n\u767b\u5f55\n\n\nmysql -u root -p\n\n# \u6216\u8005\n\n\n#\u670d\u52a1\u542f\u52a8\u540e\u7aef\u53e3\u67e5\u8be2\nsudo netstat -anp | grep mysql\n\n#\u8fde\u63a5\u6570\u636e\u5e93\nmysql -h 127.0.0.1 -P 3306 -uroot -p123456\n#-h\u4e3a\u8fdc\u7a0bIP\uff0c-P\u4e3a\u7aef\u53e3\u53f7\uff0c-u\u4e3a\u7528\u6237\u540d\uff0c-p\u4e3a\u5bc6\u7801\n\n\u7ba1\u7406\n\n#\u542f\u52a8\nsudo service mysql start\n#\u505c\u6b62\nsudo service mysql stop\n#\u670d\u52a1\u72b6\u6001\nsudo service mysql status\n\n\u5378\u8f7d\n\n#\u9996\u5148\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5220\u9664MySQL\u670d\u52a1\u5668\uff1a\nsudo apt-get remove mysql-server\n#\u7136\u540e\uff0c\u5220\u9664\u968fMySQL\u670d\u52a1\u5668\u81ea\u52a8\u5b89\u88c5\u7684\u4efb\u4f55\u5176\u4ed6\u8f6f\u4ef6\uff1a\nsudo apt-get autoremove\n#\u5378\u8f7d\u5176\u4ed6\u7ec4\u4ef6\uff1a\nsudo apt-get remove &lt;&lt;package-name&gt;&gt;\n#\u67e5\u770b\u4eceMySQL APT\u5b58\u50a8\u5e93\u5b89\u88c5\u7684\u8f6f\u4ef6\u5305\u5217\u8868\uff1a\ndpkg -l | grep mysql | grep ii\n\n\u5176\u4ed6\n\n\u8fdc\u7a0b\u8fde\u63a5\u62a5\u9519\n\n\u6253\u5f00/etc/mysql/mysql.conf.d/\u6587\u4ef6\uff0c\u627e\u5230bind-address = 127.0.0.1\u5728\u524d\u9762\u52a0\u4e0a#\u6ce8\u91ca\u6389\n\n#bind-address = 127.0.0.1\n\n\u518d\u91cd\u542f\u670d\u52a1\u5373\u53ef\n\nservice mysql restart\n\n", "categories": [{"name": "\u7f16\u7a0b\u7b14\u8bb0", "slug": "\u7f16\u7a0b\u7b14\u8bb0", "permalink": "/category/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"}, {"name": "\u73af\u5883\u914d\u7f6e", "slug": "\u73af\u5883\u914d\u7f6e", "permalink": "/category/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}], "tags": [{"name": "mysql", "slug": "mysql", "permalink": "/tag/mysql/"}]}, {"title": "MobaXterm \u4f7f\u7528SSH \u514d\u5bc6\u7801\u767b\u5f55\u95ee\u9898", "date": "2020-07-23T12:00:00-00.00", "path": "/archives/mobaxterm_ssh/", "text": "\u8bf4\u660e\n\u5728\u4f7f\u7528cmd\u6216\u8005git bash\u751f\u6210ssh\u516c\u94a5\u4e4b\u540e\uff0c\u5728\u670d\u52a1\u5668\u4e0a\u52a0\u5165\u5bf9\u5e94\u7684\u516c\u94a5\u5373\u53ef\u514d\u5bc6\u8fdb\u884cssh\u8fde\u63a5\uff0c\u4f46\u662f\u5728MobaXterm\u4e2d\u65b0\u5efa\u8fde\u63a5\u8fd8\u662f\u9700\u8981\u8f93\u5165\u5bc6\u7801\u3002\nAccess denied\nroot@192.168.11.61&#39;s password:\n\n\u539f\u56e0\n\u8fd9\u662f\u56e0\u4e3aMobaXterm\u547d\u4ee4\u884c\u767b\u5f55\u7684\u7528\u6237\u662fmobaxterm\uff0c\u800c\u5e76\u975e\u662f\u6211\u4eec\u767b\u9646\u7cfb\u7edf\u7684\u7528\u6237\u3002\n\nuser for mobaxterm\n\nuser_mobaxterm\n\nuser for windows\n\nuser_windows\n\u89e3\u51b3\n\u53ea\u9700\u8981\u5728MobaXterm\u7684\u4f1a\u8bdd\u8bbe\u7f6e\u4e2d\u8981\u9009\u4e2dSSH\u6240\u7528\u7684\u79c1\u94a5\u6587\u4ef6\u5373\u53ef\u3002\nssh\n", "categories": [{"name": "\u7f16\u7a0b\u7b14\u8bb0", "slug": "\u7f16\u7a0b\u7b14\u8bb0", "permalink": "/category/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"}, {"name": "\u73af\u5883\u914d\u7f6e", "slug": "\u73af\u5883\u914d\u7f6e", "permalink": "/category/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}], "tags": [{"name": "ssh", "slug": "ssh", "permalink": "/tag/ssh/"}, {"name": "MobaXterm", "slug": "MobaXterm", "permalink": "/tag/MobaXterm/"}]}, {"title": "Sql Developer\u8fde\u63a5Oracle\u6570\u636e\u5e93", "date": "2020-07-20T20:00:00-00.00", "path": "/archives/sql_developer/", "text": "\u5b89\u88c5\u6570\u636e\u5e93\n\n\u5b89\u88c5oracle\u6570\u636e\u5e93\u6240\u6709\u7684\u6587\u4ef6\u90fd\u5728\u8fd9\u91cc\n\n\n\u8fde\u63a5\u6570\u636e\u5e93\n\n\u4f7f\u7528cmd \u8f93\u5165 sqlplus\u8fdb\u884c\u8fde\u63a5\u6570\u636e\u5e93\n\n\u6253\u5f00\u8f6f\u4ef6\u6839\u76ee\u5f55/product/11.2/db_home1/sqldeveloper/sqldeveloper.exe\n\n\n\u7136\u800c\u8fd9\u5c06\u65e0\u6cd5\u4f7f\u7528\uff0c\u56e0\u4e3a\u4e0d\u8bba\u662f\u81ea\u5e26\u7684jdk\u8fd8\u662f\u4e00\u822c\u81ea\u5df1\u914d\u5236\u7684jdk\u90fd\u662f64\u4f4d\uff0c\u4f46\u662f\u5b98\u65b9\u5728\u5236\u4f5c\u65f6\u8fd9\u91cc\u9762\u81ea\u5e26\u7684sqlDeveloper\u662f\u4e0d\u652f\u630164\u4f4djdk\u7684\uff0c\u6240\u4ee5\u9700\u8981\u66f4\u6362\u6210\u65b0\u7248\u672c\u7684\uff0c\u70b9\u8fd9\u91cc\n\u9047\u5230\u7684\u95ee\u9898\n\u7136\u800c\uff0c\u5728\u4f7f\u752864\u4f4djdk\u4e4b\u540e\uff0c\u53ef\u80fdC:\\\\Program Files\\\\java\\\\jdk***\\\\jre\\\\bin\\\\\u91cc\u9762\u5e76\u6ca1\u6709msvcr100.dll\uff0c\u5c31\u53ea\u9700\u8981\u5c06sqlDeveloper/jdk/jre/bin/\u91cc\u9762\u7684msvcr100.dllcopy\u4e00\u4efd\u8fc7\u53bb\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5e26jdk\u7684sqlDeveloper\u91cc\u9762\u7684jdk\u4e5f\u662f\u53ef\u4ee5\u7684\n\u53c2\u8003\n\n\u5b89\u88c5Oracle11g\u540e\u65e0\u6cd5\u4f7f\u7528\u5176\u81ea\u5e26\u7684SQLdeveloper\n\n", "categories": [{"name": "\u7f16\u7a0b\u7b14\u8bb0", "slug": "\u7f16\u7a0b\u7b14\u8bb0", "permalink": "/category/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"}, {"name": "\u73af\u5883\u914d\u7f6e", "slug": "\u73af\u5883\u914d\u7f6e", "permalink": "/category/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}], "tags": [{"name": "sql developer", "slug": "sql developer", "permalink": "/tag/sql%20developer/"}, {"name": "oracle\u6570\u636e\u5e93", "slug": "oracle\u6570\u636e\u5e93", "permalink": "/tag/oracle%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}, {"title": "Trojan\u811a\u672c", "date": "2020-07-17T01:02:00-00.00", "path": "/archives/trojan/", "text": "Trojan\u9762\u677f\u811a\u672c\n\u5b89\u88c5Curl\u652f\u6301\u73af\u5883\napt -y install curl      #Debian\nyum -y install curl     #CentOS\n\n#\u5b89\u88c5/\u66f4\u65b0\nsource &lt;(curl -sL https://git.io/trojan-install)\n\n#\u5378\u8f7d\nsource &lt;(curl -sL https://git.io/trojan-install) --remove\n\nUsage:\n  trojan [flags]\n  trojan [command]\n\nAvailable Commands:\n  add         \u6dfb\u52a0\u7528\u6237\n  completion  \u81ea\u52a8\u547d\u4ee4\u8865\u5168(\u652f\u6301bash\u548czsh)\n  del         \u5220\u9664\u7528\u6237\n  help        Help about any command\n  info        \u7528\u6237\u4fe1\u606f\u5217\u8868\n  restart     \u91cd\u542ftrojan\n  start       \u542f\u52a8trojan\n  status      \u67e5\u770btrojan\u72b6\u6001\n  stop        \u505c\u6b62trojan\n  tls         \u8bc1\u4e66\u5b89\u88c5\n  update      \u66f4\u65b0trojan\n  version     \u663e\u793a\u7248\u672c\u53f7\n  web         \u4ee5web\u65b9\u5f0f\u542f\u52a8\n\nFlags:\n  -h, --help   help for trojan\n\n", "categories": [{"name": "\u65e5\u5e38\u6280\u5de7", "slug": "\u65e5\u5e38\u6280\u5de7", "permalink": "/category/%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7/"}, {"name": "VPS", "slug": "VPS", "permalink": "/category/VPS/"}], "tags": [{"name": "Trojan", "slug": "Trojan", "permalink": "/tag/Trojan/"}]}, {"title": "crontab\u5b9a\u65f6\u8ba1\u5212", "date": "2020-07-16T09:07:00-00.00", "path": "/archives/crontab/", "text": "\u7b80\u4ecb\n\n\u540d\u79f0\uff1acrontab\n\n\u529f\u80fd\u8bf4\u660e\uff1a\u8bbe\u7f6e\u8ba1\u65f6\u5668\u3002\n\n\u8bed\u6cd5\uff1acrontab [-u &lt;\u7528\u6237\u540d\u79f0&gt;][\u914d\u7f6e\u6587\u4ef6] \u6216 crontab [-u &lt;\u7528\u6237\u540d\u79f0&gt;][-elr]\n\n\u53c2\u6570\uff1a\n\n\ncrontab -u //\u8bbe\u5b9a\u67d0\u4e2a\u7528\u6237\u7684cron\u670d\u52a1\uff0c\u4e00\u822croot\u7528\u6237\u5728\u6267\u884c\u8fd9\u4e2a\u547d\u4ee4\u7684\u65f6\u5019\u9700\u8981\u6b64\u53c2\u6570\n\ncrontab -l //\u5217\u51fa\u67d0\u4e2a\u7528\u6237cron\u670d\u52a1\u7684\u8be6\u7ec6\u5185\u5bb9\n\ncrontab -r //\u5220\u9664\u67d0\u4e2a\u7528\u6237\u7684cron\u670d\u52a1\n\ncrontab -e //\u7f16\u8f91\u67d0\u4e2a\u7528\u6237\u7684cron\u670d\u52a1\n\n\n\u8865\u5145\u8bf4\u660e\uff1acron\u662f\u4e00\u4e2a\u5e38\u9a7b\u670d\u52a1\uff0c\u5b83\u63d0\u4f9b\u8ba1\u65f6\u5668\u7684\u529f\u80fd\uff0c\u8ba9\u7528\u6237\u5728\u7279\u5b9a\u7684\u65f6\u95f4\u5f97\u4ee5\u6267\u884c\u9884\u8bbe\u7684\u6307\u4ee4\u6216\u7a0b\u5e8f\u3002\u53ea\u8981\u7528\u6237\u4f1a\u7f16\u8f91\u8ba1\u65f6\u5668\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u8ba1\u65f6\u5668\u7684\u529f\u80fd\u3002\u5176\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f\u5982\u4e0b\uff1a\n\n\u57fa\u672c\u683c\u5f0f\n*\u3000\u3000*\u3000\u3000*\u3000\u3000*\u3000\u3000*\u3000\u3000command\n\u5206\u3000\u65f6\u3000\u65e5\u3000\u6708\u3000\u5468\u3000\u547d\u4ee4\n\n\u7b2c1\u5217\u8868\u793a\u5206\u949f1\uff5e59 \u6bcf\u5206\u949f\u7528*\u6216\u8005 */1\u8868\u793a\n\u7b2c2\u5217\u8868\u793a\u5c0f\u65f61\uff5e23\uff080\u8868\u793a0\u70b9\uff09\n\u7b2c3\u5217\u8868\u793a\u65e5\u671f1\uff5e31\n\u7b2c4\u5217\u8868\u793a\u6708\u4efd1\uff5e12\n\u7b2c5\u5217\u6807\u8bc6\u53f7\u661f\u671f0\uff5e6\uff080\u8868\u793a\u661f\u671f\u5929\uff09\n\u7b2c6\u5217\u8981\u8fd0\u884c\u7684\u547d\u4ee4\n\n\u8be6\u7ec6\u8bf4\u660e\n\n\u65f6\u7a0b\u8868\u7684\u683c\u5f0f\u5982\u4e0b :\n\nf1 f2 f3 f4 f5 program\n\n\u5176\u4e2d f1 \u662f\u8868\u793a\u5206\u949f\uff0cf2 \u8868\u793a\u5c0f\u65f6\uff0cf3 \u8868\u793a\u4e00\u4e2a\u6708\u4efd\u4e2d\u7684\u7b2c\u51e0\u65e5\uff0cf4 \u8868\u793a\u6708\u4efd\uff0cf5 \u8868\u793a\u4e00\u4e2a\u661f\u671f\u4e2d\u7684\u7b2c\u51e0\u5929\u3002program \u8868\u793a\u8981\u6267\u884c\u7684\u7a0b\u5e8f\u3002\n\n\u5f53 f1 \u4e3a * \u65f6\u8868\u793a\u6bcf\u5206\u949f\u90fd\u8981\u6267\u884c program\uff0cf2 \u4e3a * \u65f6\u8868\u793a\u6bcf\u5c0f\u65f6\u90fd\u8981\u6267\u884c\u7a0b\u5e8f\uff0c\u5176\u4f59\u7c7b\u63a8\n\n\u5f53 f1 \u4e3a a-b \u65f6\u8868\u793a\u4ece\u7b2c a \u5206\u949f\u5230\u7b2c b \u5206\u949f\u8fd9\u6bb5\u65f6\u95f4\u5185\u8981\u6267\u884c\uff0cf2 \u4e3a a-b \u65f6\u8868\u793a\u4ece\u7b2c a \u5230\u7b2c b \u5c0f\u65f6\u90fd\u8981\u6267\u884c\uff0c\u5176\u4f59\u7c7b\u63a8\n\n\u5f53 f1 \u4e3a */n \u65f6\u8868\u793a\u6bcf n \u5206\u949f\u4e2a\u65f6\u95f4\u95f4\u9694\u6267\u884c\u4e00\u6b21\uff0cf2 \u4e3a */n \u8868\u793a\u6bcf n \u5c0f\u65f6\u4e2a\u65f6\u95f4\u95f4\u9694\u6267\u884c\u4e00\u6b21\uff0c\u5176\u4f59\u7c7b\u63a8\n\n\u5f53 f1 \u4e3a a, b, c,... \u65f6\u8868\u793a\u7b2c a, b, c,... \u5206\u949f\u8981\u6267\u884c\uff0cf2 \u4e3a a, b, c,... \u65f6\u8868\u793a\u7b2c a, b, c...\u4e2a\u5c0f\u65f6\u8981\u6267\u884c\uff0c\u5176\u4f59\u7c7b\u63a8\n\n\u4f7f\u7528\u8005\u4e5f\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u8bbe\u5b9a\u5148\u5b58\u653e\u5728\u6863\u6848 file \u4e2d\uff0c\u7528 crontab file \u7684\u65b9\u5f0f\u6765\u8bbe\u5b9a\u65f6\u7a0b\u8868\u3002\n\n\u65e5\u5e38\u4f8b\u5b50\n\u6bcf\u6708\u6bcf\u59297\u70b9\u7684\u7b2c 0 \u5206\u949f\u6267\u884c\u4e00\u6b21 /bin/ls \n0 7 * * * /bin/ls\n\n\u5728 12 \u6708\u5185, \u6bcf\u5929\u7684\u65e9\u4e0a 6 \u70b9\u5230 12 \u70b9\u4e2d\uff0c\u6bcf\u9694 20 \u5206\u949f\u6267\u884c\u4e00\u6b21 /usr/bin/backup \n0 6-12/20 * 12 * /usr/bin/backup\n\n\u5468\u4e00\u5230\u5468\u4e94\u6bcf\u5929\u4e0b\u5348 5:00 \u5bc4\u4e00\u5c01\u4fe1\u7ed9 wen.yang@bibipu.com \n0 17 * * 1-5 mail -s &quot;hi&quot; wen.yang@bibipu.com &lt; /tmp/maildata\n\n\u6bcf\u6708\u6bcf\u5929\u7684\u5348\u591c 0 \u70b9 20 \u5206, 2 \u70b9 20 \u5206, 4 \u70b9 20 \u5206....\u6267\u884c echo &quot;haha&quot;\n20 0-23/2 * * * echo &quot;haha&quot;\n\n\u670d\u52a1\u5668\u5b9e\u4f8b\n\ncrontab\u6587\u4ef6\u7684\u4e00\u4e9b\u4f8b\u5b50\uff1a\n\n30 21 * * * /usr/local/etc/rc.d/lighttpd restart\n\u4e0a\u9762\u7684\u4f8b\u5b50\u8868\u793a\u6bcf\u665a\u768421:30\u91cd\u542fapache\u3002\n\n45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart\n\u4e0a\u9762\u7684\u4f8b\u5b50\u8868\u793a\u6bcf\u67081\u300110\u300122\u65e5\u76844 : 45\u91cd\u542fapache\u3002\n\n10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart\n\u4e0a\u9762\u7684\u4f8b\u5b50\u8868\u793a\u6bcf\u5468\u516d\u3001\u5468\u65e5\u76841 : 10\u91cd\u542fapache\u3002\n\n0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart\n\u4e0a\u9762\u7684\u4f8b\u5b50\u8868\u793a\u5728\u6bcf\u592918 : 00\u81f323 : 00\u4e4b\u95f4\u6bcf\u969430\u5206\u949f\u91cd\u542fapache\u3002\n\n0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart\n\u4e0a\u9762\u7684\u4f8b\u5b50\u8868\u793a\u6bcf\u661f\u671f\u516d\u768411 : 00 pm\u91cd\u542fapache\u3002\n\n* */1 * * * /usr/local/etc/rc.d/lighttpd restart\n\u6bcf\u4e00\u5c0f\u65f6\u91cd\u542fapache\n\n* 23-7/1 * * * /usr/local/etc/rc.d/lighttpd restart\n\u665a\u4e0a11\u70b9\u5230\u65e9\u4e0a7\u70b9\u4e4b\u95f4\uff0c\u6bcf\u9694\u4e00\u5c0f\u65f6\u91cd\u542fapache\n\n0 11 4 * mon-wed /usr/local/etc/rc.d/lighttpd restart\n\u6bcf\u6708\u76844\u53f7\u4e0e\u6bcf\u5468\u4e00\u5230\u5468\u4e09\u768411\u70b9\u91cd\u542fapache\n\n0 4 1 jan * /usr/local/etc/rc.d/lighttpd restart\n\u4e00\u6708\u4e00\u53f7\u76844\u70b9\u91cd\u542fapache\n\n\u6269\u5c55\n\nFreebsd\u53d6\u6628\u5929\u65e5\u671f\u65b9\u6cd5\uff1adate -v -1d +%Y%m%d\n\nFreebsd\u53d6\u4e0a\u4e2a\u5468\u4eca\u65e5\u65b9\u6cd5\uff1adate -v -1w +%Y%m%d\n\nFreebsd\u53d6\u4e0a\u4e2a\u6708\u4eca\u65e5\u65b9\u6cd5\uff1adate -v -1m +%Y%m%d\n\nFreebsd\u53d6\u53bb\u5e74\u4eca\u65e5\u7684\u65b9\u6cd5\uff1adate -v -1y +%Y%m%d\n\n\n\u53c2\u8003\n\nhttps://blog.csdn.net/shaobingj126/java/article/details/5638006\n\n", "categories": [{"name": "\u65e5\u5e38\u6280\u5de7", "slug": "\u65e5\u5e38\u6280\u5de7", "permalink": "/category/%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7/"}, {"name": "linux", "slug": "linux", "permalink": "/category/linux/"}], "tags": [{"name": "crontab", "slug": "crontab", "permalink": "/tag/crontab/"}]}, {"title": "BBR\u5f00\u542f\u811a\u672c", "date": "2020-07-16T09:07:00-00.00", "path": "/archives/bbr-plus/", "text": "\u4e00\u952e\u5f00\u542fBBR-plus\u811a\u672c\nwget --no-check-certificate https://raw.githubusercontent.com/cx9208/Linux-NetSpeed/master/tcp.sh &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh\n\n", "categories": [{"name": "\u65e5\u5e38\u6280\u5de7", "slug": "\u65e5\u5e38\u6280\u5de7", "permalink": "/category/%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7/"}, {"name": "VPS", "slug": "VPS", "permalink": "/category/VPS/"}], "tags": [{"name": "bbr", "slug": "bbr", "permalink": "/tag/bbr/"}]}, {"title": "Java\u7ea6\u745f\u592b\u73af\u95ee\u9898", "date": "2020-07-14T01:46:00-00.00", "path": "/archives/Joseph_Java/", "text": "\u7ea6\u745f\u592b\u73af\u95ee\u9898\uff1a\u4eba\u4eec\u7ad9\u5728\u4e00\u4e2a\u7b49\u5f85\u88ab\u5904\u51b3\u7684\u5708\u5b50\u91cc\u3002 \u8ba1\u6570\u4ece\u5706\u5708\u4e2d\u7684\u6307\u5b9a\u70b9\u5f00\u59cb\uff0c\u5e76\u6cbf\u6307\u5b9a\u65b9\u5411\u56f4\u7ed5\u5706\u5708\u8fdb\u884c\u3002 \u5728\u8df3\u8fc7\u6307\u5b9a\u6570\u91cf\u7684\u4eba\u4e4b\u540e\uff0c\u6267\u884c\u4e0b\u4e00\u4e2a\u4eba\u3002 \u5bf9\u5269\u4e0b\u7684\u4eba\u91cd\u590d\u8be5\u8fc7\u7a0b\uff0c\u4ece\u4e0b\u4e00\u4e2a\u4eba\u5f00\u59cb\uff0c\u671d\u540c\u4e00\u65b9\u5411\u8df3\u8fc7\u76f8\u540c\u6570\u91cf\u7684\u4eba\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4e2a\u4eba\uff0c\u5e76\u88ab\u91ca\u653e\u3002\n\u4f8b\u9898\n\n\u8bbe\u6709n\u4e2a\u4eba\u56f4\u5750\u4e00\u5708\u5e76\u6309\u987a\u65f6\u9488\u65b9\u5411\u4ece1\u5230n\u7f16\u53f7\uff0c\u4ece\u7b2c1\u4e2a\u4eba\u5f00\u59cb\u8fdb\u884c1\u5230m\u7684\u62a5\u6570\uff0c\u62a5\u6570\u5230\u7b2c\u4e2am\u4eba\uff0c\u6b64\u4eba\u51fa\u5708\uff0c\u518d\u4ece\u4ed6\u7684\u4e0b\u4e00\u4e2a\u4eba\u91cd\u65b0\u5f00\u59cb1\u5230m\u7684\u62a5\u6570\uff0c\u5982\u6b64\u8fdb\u884c\u4e0b\u53bb\u76f4\u5230\u6240\u5269\u4e0b\u4e00\u4eba\u4e3a\u6b62\u3002\n\n\u89e3\u51b3\u65b9\u6cd5\uff1aLinkedList + Iterator\n\n\nLinkedList\u7c7b\u662f\u53cc\u5411\u94fe\u8868,\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u5305\u542b\u4e86\u5bf9\u524d\u4e00\u4e2a\u548c\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\n\n\n\n\nIterator\u662fJava\u8fed\u4ee3\u5668\u6700\u7b80\u5355\u7684\u5b9e\u73b0\uff0c\u4e3aList\u8bbe\u8ba1\u7684ListIterator\u5177\u6709\u66f4\u591a\u7684\u529f\u80fd\uff0c\u5b83\u53ef\u4ee5\u4ece\u4e24\u4e2a\u65b9\u5411\u904d\u5386List\uff0c\u4e5f\u53ef\u4ee5\u4eceList\u4e2d\u63d2\u5165\u548c\u5220\u9664\u5143\u7d20\n\n\n\nhasNext:\u6ca1\u6709\u6307\u9488\u4e0b\u79fb\u64cd\u4f5c\uff0c\u53ea\u662f\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e0b\u4e00\u4e2a\u5143\u7d20\nnext\uff1a\u6307\u9488\u4e0b\u79fb\uff0c\u8fd4\u56de\u8be5\u6307\u9488\u6240\u6307\u5411\u7684\u5143\u7d20\nremove\uff1a\u5220\u9664\u5f53\u524d\u6307\u9488\u6240\u6307\u5411\u7684\u5143\u7d20\uff0c\u4e00\u822c\u548cnext\u65b9\u6cd5\u4e00\u8d77\u7528\uff0c\u8fd9\u65f6\u5019\u7684\u4f5c\u7528\u5c31\u662f\u5220\u9664next\u65b9\u6cd5\u8fd4\u56de\u7684\u5143\u7d20\n\n\u4ee3\u7801\n\npublic static void main(String[] args) {\n        int n = 10, m = 3;\n        LinkedList&lt;Integer&gt; L = new LinkedList&lt;&gt;();\n        for (int i = 1; i &lt;= n; i++) L.add(i);\n        Iterator&lt;Integer&gt; iterator = L.iterator();\n        while (L.size() &gt; 1) {\n            for (int cnt = 0; cnt &lt; m; cnt++) {\n                if (iterator.hasNext())\n                    iterator.next();\n                else {\n                    iterator = L.iterator();\n                    iterator.next();\n                }\n            }\n            iterator.remove();\n        }\n        System.out.println(&quot;The last one is: &quot; + L.getFirst());\n    }\n\n", "categories": [{"name": "\u7f16\u7a0b\u7b14\u8bb0", "slug": "\u7f16\u7a0b\u7b14\u8bb0", "permalink": "/category/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"}, {"name": "Java", "slug": "Java", "permalink": "/category/Java/"}], "tags": [{"name": "java", "slug": "java", "permalink": "/tag/java/"}]}, {"title": "\u5e38\u7528\u547d\u4ee4", "date": "2020-03-27T20:58:00-00.00", "path": "/archives/memo/", "text": "1\u3001Windows\n1.1 Windows\u5f00\u673a\u542f\u52a8\n# \u76ee\u5f55\u5730\u5740\nC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\n\n2\u3001Mac\n2.1 \u624b\u52a8\u5237\u65b0DNS\nsudo dscacheutil -flushcache\n\n2.2 Mac\u5f00\u542f\u4efb\u4f55\u6765\u6e90\u7684APP\nsudo spctl --master-disable\n\n2.3 Host key verification failed\nssh-keygen -R \u4f60\u8981\u8bbf\u95ee\u7684IP\u5730\u5740\n#\u5c06host key\u4eceknow_hosts\u79fb\u81f3know_hosts.old\u4e2d\u53bb\n\n2.4 \u5b89\u88c5powerleve10k\ngit clone https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k\n\nvim ~/.zshrc \n\n#add\nZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;\nPOWERLEVEL9K_MODE=&quot;awesome-patched&quot;\n\n2.5 tmux\u5e38\u7528\u5feb\u6377\u952e\ntmux new -s &quot;name&quot; #\u521b\u5efasession\ntmux attach -t     #\u91cd\u65b0\u8fde\u63a5session\nctrl b %   #\u6a2a\u5411\u5206\u5c4f\nctrl b &quot;   #\u7eb5\u5411\u5206\u5c4f\nctrl b o   #\u9009\u62e9\u7a97\u683c\nctrl d     #\u5173\u95ed\nctrl b d   #\u9690\u85cf\u6240\u6709session\nctrl b s/w #\u9009\u62e9session\n\n2.6 \u5e94\u7528\u6dfb\u52a0\u5feb\u6377\u952e\n# \u4ee5iTerm\u4e3a\u4f8b\non run {input, parameters}\n     (* Your script goes here *)\n     tell application &quot;iTerm&quot;         \n          reopen         \n          activate        \n         end tell\nend run\n\n2.7 Mac\u4e0bTerminal\u6307\u5b9a\u7528Sublime\u6253\u5f00\u6587\u4ef6\n#1\u3001open -a\nopen -a /Applications/Sublime\\ Text.app test.txt\n\n#2\u3001\u8f6f\u94fe\u63a5\nln /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl\nsubl test.txt\n\n#3\u3001alias\nalias sublime=&#39;open -a /Applications/Sublime\\ Text.app&#39;\nsublime test.txt\n\n2.8 raw.githubusercontent.comDNS\u6c61\u67d3\u95ee\u9898\n\n\u6253\u5f00ipaddress.com\u67e5\u8be2raw.githubusercontent.com\u771f\u5b9eip\n\nsudo vim /etc/hosts\n#\u6700\u540e\u4e00\u884c\u6dfb\u52a0\n199.232.68.133    raw.githubusercontent.com\nsudo dscacheutil -flushcache    #\u5237\u65b0DNS\u7f13\u5b58\n\n2.9 \u827a\u672f\u5b57\u751f\u6210\u5668\nfiglet \u5185\u5bb9\n\n2.10 \u8c37\u6b4c\u4e91ssh\nsudo -i    #\u8d85\u7ea7\u7ba1\u7406\u5458\n\nvi /etc/ssh/sshd_config    #\u4fee\u6539SSH\u914d\u7f6e\u6587\u4ef6\n\nPermitRootLogin yes    #\u9ed8\u8ba4\u4e3ano\uff0c\u9700\u8981\u5f00\u542froot\u7528\u6237\u8bbf\u95ee\u6539\u4e3ayes\nPasswordAuthentication yes    #\u9ed8\u8ba4\u4e3ano\uff0c\u6539\u4e3ayes\u5f00\u542f\u5bc6\u7801\u767b\u9646\n\npasswd root    #\u8bbe\u7f6e\u5bc6\u7801\n\n/etc/init.d/ssh restart    #\u91cd\u542fssh\u670d\u52a1\n\n2.10 zsh\u8b66\u544a\u4fe1\u606f\n#\u8bf4\u660ehttps://www.bootschool.net/article/5e79aba6f60a317efe5bbbd5/oh-my-zsh-warning-message-insecure-completion-dependent-directories-detected\nvim ~/.zshrc\nchmod 755 /usr/local/share/zsh\nchmod 755 /usr/local/share/zsh/site-functions\n\n2.11 \u7535\u8111\u8fde\u63a5Termux\n\n#termux:\nssh-keygen  #\u751f\u6210\u516c\u94a5\n\nwhoami   #\u67e5\u770b\u7528\u6237\u540d\n\n# \u7136\u540e\u5c06id_rsa.pub\u4e0a\u4f20\u5230\u7535\u8111\n\n#\u7535\u8111\nssh \u7528\u6237\u540d@ip -p 8022\n\n2.12 linux\u67e5\u770b\u4fee\u6539\u65f6\u533a\n\n\u4e00\u3001\u67e5\u770b\u548c\u4fee\u6539Linux\u7684\u65f6\u533a\n\n1. \u67e5\u770b\u5f53\u524d\u65f6\u533a\n\ndate -R\n\n2. \u4fee\u6539\u8bbe\u7f6eLinux\u670d\u52a1\u5668\u65f6\u533a\n\u65b9\u6cd5 A\n\ntzselect\n\n\u65b9\u6cd5 B \u4ec5\u9650\u4e8eRedHat Linux \u548c CentOS\n\ntimeconfig&quot;\n\n\u65b9\u6cd5 C \u9002\u7528\u4e8eDebian\n\ndpkg-reconfigure tzdata\n\n3. \u590d\u5236\u76f8\u5e94\u7684\u65f6\u533a\u6587\u4ef6\uff0c\u66ff\u6362\u7cfb\u7edf\u65f6\u533a\u6587\u4ef6\uff1b\u6216\u8005\u521b\u5efa\u94fe\u63a5\u6587\u4ef6\n\ncp /usr/share/zoneinfo/$\u4e3b\u65f6\u533a/$\u6b21\u65f6\u533a /etc/localtime\n\n\u4f8b\u5982\uff1a\u5728\u8bbe\u7f6e\u4e2d\u56fd\u65f6\u533a\u4f7f\u7528\u4e9a\u6d32/\u4e0a\u6d77\uff08+8\uff09\n\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\n3\u3001OpenWrt\n3.1 samba\u547d\u4ee4\n#\u91cd\u542f\n/etc/init.d/samba4 restart\n#\u5f00\u673a\u542f\u52a8\n/etc/init.d/samba4 enable\n#\u8bbe\u7f6e\u5bc6\u7801\nsmbpasswd -a root ****\n\n4\u3001sublime text 3\u6fc0\u6d3b\u7801\n\n----- BEGIN LICENSE -----\nMember J2TeaM\nSingle User License\nEA7E-1011316\nD7DA350E 1B8B0760 972F8B60 F3E64036\nB9B4E234 F356F38F 0AD1E3B7 0E9C5FAD\nFA0A2ABE 25F65BD8 D51458E5 3923CE80\n87428428 79079A01 AA69F319 A1AF29A4\nA684C2DC 0B1583D4 19CBD290 217618CD\n5653E0A0 BACE3948 BB2EE45E 422D2C87\nDD9AF44B 99C49590 D2DBDEE1 75860FD2\n8C8BB2AD B2ECE5A4 EFC08AF2 25A9B864\n------ END LICENSE ------\u200b\n\n", "categories": [{"name": "\u65e5\u5e38\u6280\u5de7", "slug": "\u65e5\u5e38\u6280\u5de7", "permalink": "/category/%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7/"}], "tags": [{"name": "shell", "slug": "shell", "permalink": "/tag/shell/"}, {"name": "linux", "slug": "linux", "permalink": "/tag/linux/"}, {"name": "git", "slug": "git", "permalink": "/tag/git/"}, {"name": "mac", "slug": "mac", "permalink": "/tag/mac/"}]}, {"title": "linux\u5b89\u88c5deb\u5305", "date": "2019-11-19T00:27:00-00.00", "path": "/archives/linux_deb/", "text": "\u4ee5manjaro\u4e3a\u4f8b\n\n\u68c0\u67e5\u6709\u6ca1\u6709\u5b89\u88c5 debtap\nsudo pacman -Q debtap\n\n\u6ca1\u6709\u5c31\u5b89\u88c5\nyaourt -S debtap\n\n\u5347\u7ea7debtap\n\nsudo debtap -u\n\n\u4f7f\u7528\u65b9\u6cd5\nsudo debtap  xxxx.deb\n\n\u5b89\u88c5\u65f6\u4f1a\u63d0\u793a\u8f93\u5165\u5305\u540d\uff0c\u4ee5\u53calicense\u3002\u5305\u540d\u968f\u610f\uff0clicense\u5c31\u586bGPL\u5427\n\u4e0a\u8ff0\u64cd\u4f5c\u5b8c\u6210\u540e\u4f1a\u5728deb\u5305\u540c\u7ea7\u76ee\u5f55\u751f\u6210\u00d7.tar.xz\u6587\u4ef6\uff0c\u76f4\u63a5\u7528pacman\u5b89\u88c5\u5373\u53ef\nsudo pacman -U x.tar.xz\n\n", "categories": [{"name": "\u65e5\u5e38\u6280\u5de7", "slug": "\u65e5\u5e38\u6280\u5de7", "permalink": "/category/%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7/"}, {"name": "linux", "slug": "linux", "permalink": "/category/linux/"}], "tags": [{"name": "deb\u5305", "slug": "deb\u5305", "permalink": "/tag/deb%E5%8C%85/"}]}], "pages": [{"title": "About", "date": "2020-07-14T01:23:00-00.00", "path": "/about/", "text": "\u8fd9\u662fZGGSONG\u7684wiki\u9875\u9762\uff0c\u4f7f\u7528\u7531Maverick\u751f\u6210\u3001Github\u6258\u7ba1\u4ee3\u7801\uff0c\u817e\u8baf\u4e91CloudBase\u90e8\u7f72\uff0c\u4e3b\u8981\u7528\u4e8e\u8bb0\u5f55\u96f6\u6563\u77e5\u8bc6\u3002\nContact\nEmail: zggsong#foxmail.com (replace#with@)\n", "categories": [], "tags": []}]}